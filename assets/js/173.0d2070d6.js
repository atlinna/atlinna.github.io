(window.webpackJsonp=window.webpackJsonp||[]).push([[173],{761:function(n,t,e){"use strict";e.r(t);var r=e(10),a=Object(r.a)({},(function(){var n=this.$createElement,t=this._self._c||n;return t("ContentSlotsDistributor",{attrs:{"slot-key":this.$parent.slotKey}},[t("h2",{attrs:{id:"如何查找倒数第-n-个节点"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#如何查找倒数第-n-个节点"}},[this._v("#")]),this._v(" 如何查找倒数第 N 个节点")]),this._v(" "),t("p",[this._v("由于链表的特性，除非我们遍历一遍链表，否则不可能知道链表的最大长度。\n有公式 倒数第 k 个，等于正数第 n - k + 1。\n但是我们不知道链表的长度。\n我们可以换个思路，我们先让索引走 k 步。然后创建一个新的索引，让这两个索引同时走。\n当首个索引走到最后一个节点的时候，我们的新的索引是不是走了 n - k 步。")]),this._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[this._v("var findLastNode = function (head, n) {\n    if (!head) return head;\n    var cur = head;\n    while (n > 0) {\n        cur = cur.next;\n        n -= 1;\n    }\n    var new_cur = head;\n    while (cur) {\n        cur = cur.next;\n        new_cur = new_cur.next;\n    }\n    return new_cur;\n}\n")])])])])}),[],!1,null,null,null);t.default=a.exports}}]);