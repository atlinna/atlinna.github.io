(window.webpackJsonp=window.webpackJsonp||[]).push([[47],{636:function(a,t,e){"use strict";e.r(t);var s=e(7),v=Object(s.a)({},(function(){var a=this,t=a.$createElement,e=a._self._c||t;return e("ContentSlotsDistributor",{attrs:{"slot-key":a.$parent.slotKey}},[e("h2",{attrs:{id:"对象"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#对象"}},[a._v("#")]),a._v(" 对象")]),a._v(" "),e("h3",{attrs:{id:"语法"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#语法"}},[a._v("#")]),a._v(" 语法")]),a._v(" "),e("p",[a._v("对象可以通过两种形式定义：声明（文字）形式和构造形式。\n对象的文字语法：")]),a._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v("  var obj = {};\n")])])]),e("p",[a._v("构造形式：")]),a._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v("  var obj = new Object();\n")])])]),e("p",[a._v("构造形式和文字形式生成的对象是一样的。唯一的区别是，在文字声明中你可以添加多个键 / 值对，但是在构造形式中你必须逐个添加属性。")]),a._v(" "),e("h3",{attrs:{id:"类型"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#类型"}},[a._v("#")]),a._v(" 类型")]),a._v(" "),e("p",[a._v("在 JavaScript 中一共有六种主要类型（术语是“语言类型”）")]),a._v(" "),e("ul",[e("li",[a._v("String")]),a._v(" "),e("li",[a._v("Boolean")]),a._v(" "),e("li",[a._v("Number")]),a._v(" "),e("li",[a._v("null")]),a._v(" "),e("li",[a._v("undefined")]),a._v(" "),e("li",[a._v("object")])]),a._v(" "),e("p",[a._v("其中 String、Boolean、Number、null、undefined。 是基本数据类型，本身并不是对象。")]),a._v(" "),e("p",[a._v('null 有时会被当作一种对象类型，但是这其实只是语言本身的一个 bug，即对 null 执行typeof null 时会返回字符串 "object" 。 1 实际上， null 本身是基本类型。')]),a._v(" "),e("p",[a._v("JavaScript 中有许多特殊的对象子类型，我们可以称之为复杂基本类型。")]),a._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v("  函数就是对象的一个子类型（从技术角度来说就是“可调用的对象”）。JavaScript 中的函\n  数是“一等公民”，因为它们本质上和普通的对象一样（只是可以调用），所以可以像操作\n  其他对象一样操作函数（比如当作另一个函数的参数）。\n  \n  数组也是对象的一种类型，具备一些额外的行为。数组中内容的组织方式比一般的对象要\n  稍微复杂一些。\n")])])]),e("p",[e("strong",[a._v("为什么 null 是 对象类型 object")])]),a._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v("  原理是这样的，不同的对象在底层都表示为二进制，在 JavaScript 中二进制前三位都为 0 的话会被判\n  断为 object 类型， null 的二进制表示是全 0，自然前三位也是 0，所以执行 typeof 时会返回“ object ”。\n")])])]),e("h3",{attrs:{id:"内置对象"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#内置对象"}},[a._v("#")]),a._v(" 内置对象")]),a._v(" "),e("p",[a._v("JavaScript 中还有一些对象子类型，通常被称为内置对象。有些内置对象的名字看起来和简单基础类型一样，不过实际上它们的关系更复杂")]),a._v(" "),e("ul",[e("li",[a._v("String")]),a._v(" "),e("li",[a._v("Number")]),a._v(" "),e("li",[a._v("Boolean")]),a._v(" "),e("li",[a._v("Object")]),a._v(" "),e("li",[a._v("Function")]),a._v(" "),e("li",[a._v("Array")]),a._v(" "),e("li",[a._v("Date")]),a._v(" "),e("li",[a._v("RegExp")]),a._v(" "),e("li",[a._v("Error")])]),a._v(" "),e("p",[a._v("这些内置对象从表现形式来说很像其他语言中的类型（type）或者类（class），比如 Java 中的 String 类。\n它们实际上只是一些内置函数。这些内置函数可以当作构造函数（由 new 产生的函数调用——参见第 2 章）来使用，从而可以构造一个对应子类型的新对象。")]),a._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v("  var strObj = new String('abc')\n  console.log(strObj instanceof Object);\n\n  var str = String('abc')\n  console.log(str, strObj);\n")])])]),e("p",[e("strong",[a._v("注意：如果使用 new 操作符来调用的话，那么得到的将会是一个对象，如果不使用 new 来调用，那么将会得到一个显式转换成相应数据类型的数据。")])]),a._v(" "),e("p",[a._v("在必要时语言会自动把字符串字面量转换成一个 String 对象，也就是说你并不需要显式创建一个对象。JavaScript 社区中的大多数人都认为能使用文字形式时就不要使用构造形式。")]),a._v(" "),e("p",[a._v("同样的事也会发生在数值字面量上，如果使用类似 42.359.toFixed(2) 的方法，引擎会把42 转换成 new Number(42) 。对于布尔字面量来说也是如此。")]),a._v(" "),e("p",[a._v("null 和 undefined 没有对应的构造形式，它们只有文字形式。相反， Date 只有构造，没有文字形式。")]),a._v(" "),e("p",[a._v("对于 Object 、 Array 、 Function 和 RegExp （正则表达式）来说，无论使用文字形式还是构造形式，它们都是对象，不是字面量。\n在某些情况下，相比用文字形式创建对象，构造形式可以提供一些额外选项。\n由于这两种形式都可以创建对象，所以我们首选更简单的文字形式。\n建议只在需要那些额外选项时使用构造形式。")]),a._v(" "),e("p",[a._v("Error 对象很少在代码中显式创建，一般是在抛出异常时被自动创建")]),a._v(" "),e("h3",{attrs:{id:"内容"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#内容"}},[a._v("#")]),a._v(" 内容")]),a._v(" "),e("p",[a._v("对象的内容是由一些存储在特定命名位置的（任意类型的）值组成的，我们称之为属性。")]),a._v(" "),e("p",[a._v("当我们说“内容”时，似乎在暗示这些值实际上被存储在对象内部，但是这只是它的表现形式。\n在引擎内部，这些值的存储方式是多种多样的，一般并不会存在对象容器内部。\n存储在对象容器内部的是这些属性的名称，它们就像指针（从技术角度来说就是引用）一样，指向这些值真正的存储位置。")]),a._v(" "),e("p",[a._v("假如我们有一个对象 obj ：")]),a._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v('  var oj = {\n    "a":2\n  }\n')])])]),e("p",[a._v("如果要访问 obj 中 a 位置上的值，我们需要使用 "),e("strong",[a._v(".")]),a._v(" 或 "),e("strong",[a._v("[]")]),a._v(' 操作符。\n.a 语法通常被称为“属性访问”， ["a"] 语法通常被称为“键访问”。')]),a._v(" "),e("h4",{attrs:{id:"可计算属性名"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#可计算属性名"}},[a._v("#")]),a._v(" 可计算属性名")]),a._v(" "),e("p",[a._v("ES6 增加了可计算属性名，可以在文字形式中使用 [] 包裹一个表达式来当作属性名")]),a._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v("  var keygen = Symbol('key')\n  var obj = {\n      [keygen]: 'hello this is key of Symbol'\n  }\n  console.log(obj[keygen])\n")])])]),e("h4",{attrs:{id:"属性和方法"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#属性和方法"}},[a._v("#")]),a._v(" 属性和方法")]),a._v(" "),e("p",[a._v("从技术角度来说，函数永远不会“属于”一个对象，所以把对象内部引用的函数称为“方法”似乎有点不妥。")]),a._v(" "),e("p",[a._v("确实，有些函数具有 this 引用，有时候这些 this 确实会指向调用位置的对象引用。\n但是这种用法从本质上来说并没有把一个函数变成一个“方法”，因为 this 是在运行时根据调用位置动态绑定的，所以函数和对象的关系最多也只能说是间接关系。")]),a._v(" "),e("p",[a._v("最保险的说法可能是，“函数”和“方法”在 JavaScript 中是可以互换的。")]),a._v(" "),e("p",[a._v("ES6 增加了 super 引用，一般来说会被用在 class 中。\nsuper 的行为似乎更有理由把 super 绑定的函数称为“方法”。\n但是再说一次，这些只是一些语义（和技术）上的微妙差别，本质是一样的。")]),a._v(" "),e("h4",{attrs:{id:"复制对象"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#复制对象"}},[a._v("#")]),a._v(" 复制对象")]),a._v(" "),e("p",[a._v("首先，我们应该判断它是浅复制还是深复制。\n对于 JSON 安全（也就是说可以被序列化为一个 JSON 字符串并且可以根据这个字符串解\n析出一个结构和值完全一样的对象）的对象来说，有一种巧妙的复制方法")]),a._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v("  var newObj = JSON.parse( JSON.stringify( someObj ) );\n")])])]),e("p",[a._v("当然，这种方法需要保证对象是 JSON 安全的，所以只适用于部分情况。")]),a._v(" "),e("p",[a._v("相比深复制，浅复制非常易懂并且问题要少得多，所以 ES6 定义了 Object.assign(..) 方法来实现浅复制。\nObject.assign(..) 方法的第一个参数是目标对象，之后还可以跟一个或多个源对象。\n它会遍历一个或多个源对象的所有可枚举（enumerable，参见下面的代码）的自有键（owned key，很快会介绍）并把它们复制（使用 = 操作符赋值）\n到目标对象，最后返回目标对象。")]),a._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v("  var newObj = Object.assign( {}, {a:2},{b:3} );\n")])])])])}),[],!1,null,null,null);t.default=v.exports}}]);