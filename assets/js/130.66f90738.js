(window.webpackJsonp=window.webpackJsonp||[]).push([[130],{717:function(v,_,o){"use strict";o.r(_);var t=o(10),e=Object(t.a)({},(function(){var v=this,_=v.$createElement,o=v._self._c||_;return o("ContentSlotsDistributor",{attrs:{"slot-key":v.$parent.slotKey}},[o("h3",{attrs:{id:"四层、五层、七层网络模型"}},[o("a",{staticClass:"header-anchor",attrs:{href:"#四层、五层、七层网络模型"}},[v._v("#")]),v._v(" 四层、五层、七层网络模型")]),v._v(" "),o("p",[v._v("四层：TCP/IP 四层网络模型")]),v._v(" "),o("ul",[o("li",[v._v("应用层")]),v._v(" "),o("li",[v._v("传输层")]),v._v(" "),o("li",[v._v("网络层")]),v._v(" "),o("li",[v._v("物理链路层")])]),v._v(" "),o("p",[v._v("五层：TCP/IP 五层网络模型")]),v._v(" "),o("ul",[o("li",[v._v("应用层")]),v._v(" "),o("li",[v._v("传输层")]),v._v(" "),o("li",[v._v("网络层")]),v._v(" "),o("li",[v._v("数据链路层")]),v._v(" "),o("li",[v._v("物理层")])]),v._v(" "),o("p",[o("em",[v._v("四五层没有太大区别，只是将四层的物理链路层拆分")])]),v._v(" "),o("p",[v._v("七层：OSI 七层网络模型")]),v._v(" "),o("ul",[o("li",[v._v("应用层")]),v._v(" "),o("li",[v._v("表示层")]),v._v(" "),o("li",[v._v("会话层")]),v._v(" "),o("li",[v._v("传输层")]),v._v(" "),o("li",[v._v("网络层")]),v._v(" "),o("li",[v._v("数据链路层")]),v._v(" "),o("li",[v._v("物理层")])]),v._v(" "),o("p",[o("strong",[v._v("实际中我们可以认为使用的是四层模型，也可以认为是五层模型。")])]),v._v(" "),o("p",[o("strong",[v._v("说说网络的五层模型")])]),v._v(" "),o("p",[v._v("从上到下分别为：应用层，传输层，网络层，数据链路层，物理层。")]),v._v(" "),o("p",[v._v("在发送消息时，消息从上到下进行打包，每一层会在上一层地 基础上加包，而接受消息时，从上到下进行解包，最终得到原始信息。")]),v._v(" "),o("p",[v._v("应用层主要面向互联网中的应用场景，如网页、邮件、文件中心等等，他的代表协议有：http、smtp、pop3、ftp、DNS 等等")]),v._v(" "),o("p",[v._v("传输层主要面向传输过程，如 TCP 协议是为了保证可靠的传输，而 UDP 协议则是一种无链接的广播，他们提供了不同的传输方式")]),v._v(" "),o("p",[v._v("网络层主要解决如何定位目标以及如何寻找最优路径的问题，如IP 等等")]),v._v(" "),o("p",[v._v("数据链路层的作用时将数据在一个字网内有效传输，mac地址、交换机都是属于该层的")]),v._v(" "),o("p",[v._v("物理层是要解决二进制数据到信号之间的互转问题，集线器，双绞线，同轴电缆等都是属于该层的设备。")]),v._v(" "),o("h4",{attrs:{id:"http-常见的请求方法有哪些"}},[o("a",{staticClass:"header-anchor",attrs:{href:"#http-常见的请求方法有哪些"}},[v._v("#")]),v._v(" http 常见的请求方法有哪些？")]),v._v(" "),o("ul",[o("li",[v._v("GET 表示向服务器获取资源")]),v._v(" "),o("li",[v._v("POST 表示向服务器提交信息，通常用于产生新的数据，比如注册")]),v._v(" "),o("li",[v._v("PUT 表示希望修改服务器的数据，通常用于修改")]),v._v(" "),o("li",[v._v("DELETE 表示希望删除服务器数据")]),v._v(" "),o("li",[v._v("OPTIONS 发生在跨域的预检请求中，表示客户端向服务器申请跨域提交")]),v._v(" "),o("li",[v._v("TRACE 回显服务器收到的请求，主要用于测试和诊断")]),v._v(" "),o("li",[v._v("CONNECT 用于建立连接管道，通常在代理场景中使用。")])]),v._v(" "),o("h4",{attrs:{id:"get-和-post-的区别"}},[o("a",{staticClass:"header-anchor",attrs:{href:"#get-和-post-的区别"}},[v._v("#")]),v._v(" GET 和 POST 的区别")]),v._v(" "),o("p",[v._v("从 http 协议的角度来说 GET 和 POST 他们都只是请求行中的第一个单词，除了语义不同，其实没有什么本质区别。")]),v._v(" "),o("p",[v._v("之所以在实际开发中会产生各种区别，主要是因为浏览器的默认行为造成的")]),v._v(" "),o("p",[v._v("受浏览器影响，在实际开发中，GET 和 POST 有以下区别：")]),v._v(" "),o("ul",[o("li",[v._v("浏览器在发送 GET 请求时，不会福袋请求体")]),v._v(" "),o("li",[v._v("GET 请求的传递信息量有限，适合少量数据的传递；POST请求的传递信息量是没有限制的")]),v._v(" "),o("li",[v._v("GET 请求只能传递 ASCII 数据，遇到非 ASCII 数据需要进行编码（encodeURIComponent）；POST请求没有限制")]),v._v(" "),o("li",[v._v("大部分GET请求传递的数据都附带在 path 参数中，能够通过分享地址完整的重现页面，但同时也暴露了数据，若有敏感数据传递，不应该使用GET请求，至少不因该放到 path 中。")]),v._v(" "),o("li",[v._v("刷新页面时，若当前页面是通过 POST 请求得到的，则浏览器会提示用户是否重新提交。若是GET请求的到的页面则没有提示。")]),v._v(" "),o("li",[v._v("GET 请求的地址可以被保存为浏览器书签，POST 不可以")])]),v._v(" "),o("p",[o("strong",[v._v("encodeURI 与 encodeURIComponent 区别")]),v._v("\nencodeURI 不会对地址路径中的预留字符 如冒号等，进行编码\nencodeURIComponent 会转码。")]),v._v(" "),o("h4",{attrs:{id:"cookie-sessionstorage-localstorage-的区别"}},[o("a",{staticClass:"header-anchor",attrs:{href:"#cookie-sessionstorage-localstorage-的区别"}},[v._v("#")]),v._v(" Cookie/sessionStorage/localStorage 的区别")]),v._v(" "),o("p",[v._v("cookie、sessionStorage、localStorage 都是保存本地数据的方式")]),v._v(" "),o("p",[v._v("其中，cookie 兼容性好，所有浏览器都支持。浏览器针对 cookie 会有一些默认行为，比如当响应头中出现 set-cookie 字段时，浏览器会自动保存 cookie 的值；浏览器发送请求时，会附带匹配的 cookie 到请求头中。这些默认行为是的 cookie 长期以来担任着维持登陆状态的责任。与此同时，也正是因为浏览器的默认行为给了恶意攻击者可乘之机，CSRF 攻击就是一个典型的利用 cookie 的攻击方式。虽然 cookie 不断改进，但前段仍然需要另一种更加安全的保存数据的方式")]),v._v(" "),o("p",[v._v("HTML5 新增了 sessionStorage 和 localStorage，前者用于保存会话级别的数据，后者更持久的保存数据。浏览器针对他们没有任何默认行为，这样以来，就把保存数据、读取数据的工作交给了前段开发者，这就让恶意攻击难以针对登陆状态进行攻击。 Cookie 的大小是有限制的，一般浏览器会限制同一个域下的 cookie 总量为 4M，而sessionStorage 和 localStorage 则没有限制 cookie 会与 domain、path 关联，而sessionStoage 和 localStorage 只与 domain 关联。")])])}),[],!1,null,null,null);_.default=e.exports}}]);