(window.webpackJsonp=window.webpackJsonp||[]).push([[25],{614:function(t,n,e){"use strict";e.r(n);var a=e(10),s=Object(a.a)({},(function(){var t=this,n=t.$createElement,e=t._self._c||n;return e("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[e("h3",{attrs:{id:"npm-模块的安装机制"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#npm-模块的安装机制"}},[t._v("#")]),t._v(" npm 模块的安装机制")]),t._v(" "),e("ol",[e("li",[t._v("npm 会检查本地的 node_modules 目录中是否已经安装过该模块，如果已安装，则不再重新安装")]),t._v(" "),e("li",[t._v("npm 检查缓存中是否有相同的模块，如果有，直接从缓存中读取安装。")]),t._v(" "),e("li",[t._v("如果本地和缓存中均不存在，npm 会从 registry 指定的地址下载安装包，然后将其写入到本地的 node_modules 目录中，同时缓存起来。")])]),t._v(" "),e("h3",{attrs:{id:"npm-缓存相关指令"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#npm-缓存相关指令"}},[t._v("#")]),t._v(" npm 缓存相关指令")]),t._v(" "),e("ul",[e("li",[t._v("npm cache clean -f。-- 清除缓存")]),t._v(" "),e("li",[t._v("npm config get cache  -- 获取缓存位置")]),t._v(" "),e("li",[t._v("npm config set cache ‘新的缓存路径’  -- 设置缓存位置")])])])}),[],!1,null,null,null);n.default=s.exports}}]);