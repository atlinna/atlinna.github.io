(window.webpackJsonp=window.webpackJsonp||[]).push([[80],{669:function(n,a,e){"use strict";e.r(a);var t=e(10),s=Object(t.a)({},(function(){var n=this,a=n.$createElement,e=n._self._c||a;return e("ContentSlotsDistributor",{attrs:{"slot-key":n.$parent.slotKey}},[e("h1",{attrs:{id:"ecamscript-5"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#ecamscript-5"}},[n._v("#")]),n._v(" ECAMScript-5")]),n._v(" "),e("h2",{attrs:{id:"this-toturial-will-teach-you-javascript-from-basic-to-advanced"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#this-toturial-will-teach-you-javascript-from-basic-to-advanced"}},[n._v("#")]),n._v(" This toturial will teach you javascript from basic to advanced")]),n._v(" "),e("h2",{attrs:{id:"come-on-let-s-go-get-start-it"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#come-on-let-s-go-get-start-it"}},[n._v("#")]),n._v(" come on,let's go get start it!")]),n._v(" "),e("p",[n._v("** First! Learn to use documents **\nhttps://www.w3schools.com/js/js_whereto.asp")]),n._v(" "),e("h3",{attrs:{id:"some-knowledges"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#some-knowledges"}},[n._v("#")]),n._v(" some knowledges")]),n._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[n._v("  javascript and java are completely different languages,\n  both in concept and design.JavaScript was invented by Brendan Eich in 1995,\n  and became an ECMA standard in 1997.\n")])])]),e("hr"),n._v(" "),e("h3",{attrs:{id:"基本数据类型"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#基本数据类型"}},[n._v("#")]),n._v(" 基本数据类型")]),n._v(" "),e("ul",[e("li",[n._v("String")]),n._v(" "),e("li",[n._v("Number")]),n._v(" "),e("li",[n._v("Boolean")]),n._v(" "),e("li",[n._v("Symbol")]),n._v(" "),e("li",[n._v("Null")]),n._v(" "),e("li",[n._v("Undefined")]),n._v(" "),e("li",[n._v("BigInt    for google only")])]),n._v(" "),e("h3",{attrs:{id:"引用类型"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#引用类型"}},[n._v("#")]),n._v(" 引用类型")]),n._v(" "),e("ul",[e("li",[n._v("Object")])]),n._v(" "),e("ul",[e("li",[n._v("Function")]),n._v(" "),e("li",[n._v("Array")]),n._v(" "),e("li",[n._v("Date")]),n._v(" "),e("li",[n._v("RegExp")])]),n._v(" "),e("p",[n._v("你可以使用typeof 来查看我们的数据类型(基本类型)，\n但是你会发现 当你使用typeof 来检查null的时候 返回的是object\n具体原因是：")]),n._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[n._v("  因为不同的对象在底层都表示为二进制，在javascript中二进制前三位为0的话都会被判断为object类型，\n  null的二进制表示为全0，所以他的前三位肯定是0，因此 当你使用typeof来检查null的类型返回的是object。\n")])])]),e("p",[n._v("如果使用typeof 来检查引用类型\n举个栗子：")]),n._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[n._v("typeof Array  //function\ntypeof Array()  //object\ntypeof new Array() //object\n\ntypeof Boolean //function\ntypeof Boolean() // boolean\ntypeof new Boolean() // object\n")])])]),e("p",[n._v("我们可以看到 typeof 不止能检查出基本数据的类型 ，还能检测出function 类型，也就是说\n我们的js 内置构造函数 如Array，Number等 都是function，函数也属于对象。\n而我们使用new关键字创建的实例是 一个对象Object。")]),n._v(" "),e("p",[n._v("typeof的安全防护机制")]),n._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[n._v("首先要知道undefined(未定义)和undeclared（未声明）\nundefined 和 undeclared 表现相同都为undefined。\n假设我们要引入一个js 但是这个js我们只想在开发环境或者测试环境中引入，这个js中有个全局开关Flag 当Flag=true时 我们认为他引入\n如果直接使用if判断Flag的话 会报错。\nif(Flag){//···}\n因为根本没有生命这个变量\n所以 我们可以使用一种安全的方式\n我们可以确定 typeof Flag 存在的话 是boolean 不存在的话 或者说没有声明的话 是undefined\nif(typeof Flag !== 'undefined' ){//···}\n")])])]),e("p",[n._v("注意：")]),n._v(" "),e("ul",[e("li",[n._v("js是单线程")]),n._v(" "),e("li",[n._v("代码同步执行，只有栈顶的上下文执行，其他的需要等待。")]),n._v(" "),e("li",[n._v("全局上下文只有一个，当浏览器关闭时出栈。")]),n._v(" "),e("li",[n._v("函数的执行上下文没有限制，理论上可以无限增加。")])]),n._v(" "),e("hr"),n._v(" "),e("h3",{attrs:{id:"类型转换"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#类型转换"}},[n._v("#")]),n._v(" 类型转换")]),n._v(" "),e("p",[n._v("js 可以通过一些内置的构造函数或方法来将一种类型转换成另外一种类型，如 字符串 转换成 数字")]),n._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[n._v(" 有构造函数Number、String、Boolean、Symbol 构造函数 分别能将数据转为 数字、字符串、布尔值、标记值。\n \n let a = 12;        //  12\n let b = String(a); // '12'\n \n 像这种你能够清楚的知道要转换的类型是什么的行为吧 成为显式类型转换。\n \n 你知道上面的结果 那你知道下面的结果吗？\n let a = '12';\n let b = 3;\n let c = 8;\n let ret;\n \n ret = a + b;      // '123'\n ret = a - c;      // 4\n ret = c + a;      // '812'\n ret = a * b;      // 36\n ret = a + b * c;  // '1224'\n ret = a / b;      // 3\n \n 看看你答对了多少？\n \n 为什么会这样？\n 因为在计算时由于等号两边的数据类型不同 导致cpu无法进行计算，js的编译器会自动将运算符两边的数据转换为同一类型。\n \n 规则是怎样的呢？\n \n 1、String字符串转换：如字符串 + 变量 = 字符串；\n 如 '12' + 3 = '123';\n    '' + 4 = '4';\n    \n 2、Number数字类型：使用算术运算符 或 关系运算符\n    '12' - 3 = 9;\n    '12' - '3' = 9;\n    \n 3、Boolean布尔转换： ！变量\n    !!'12' = true;\n    \n 4、undefined == null 但是 undefeied !== null\n \n 5、NaN 不等于任何数 包括他自身\n \n 6、true = 1， false = 0\n \n 7、引用类型不要使用 == 判断 因为保存的是引用地址。\n \n 8、'12' + 3 如何等于 15\n    +'12' + 3 = 15\n    9 + +'12' = ? // 21\n \n")])])]),e("h3",{attrs:{id:"的作用"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#的作用"}},[n._v("#")]),n._v(" == 的作用")]),n._v(" "),e("p",[n._v("我们知道 1 != 2; true == true;\n那是否知道 [] == ![]的结果呢？ 答案是true\n很神奇是吧，如果你对 == 有了一定理解之后这个就很简单啦。")]),n._v(" "),e("p",[n._v("首先我们来看看 == 是怎么工作的。这里会涉及强制类型转换（隐式）。")]),n._v(" "),e("ul",[e("li",[n._v("1、如果有一个数据是布尔值，则在比较相等性前会将他转换成数值 即 false -- 0   true -- 1.")]),n._v(" "),e("li",[n._v("2、如果有一个数据是字符串，另一个值是数字，在比较相等性前会先将字符串转为数字。 '' -- 0")]),n._v(" "),e("li",[n._v('3、如果一个数据是对象，另一个不是，则会调用对象的valueOf方法，如果拿到的值不是基本类型，则会根据valueOf的返回值继续调用toString方法 （这是为什么会出现"[object object]"的原因）')]),n._v(" "),e("li",[n._v("4、如果两个数据都是对象，则比较他们是否为同一对象。如果是 返回true 否则为 false\n这两个数据在比较时要遵循以下规则")]),n._v(" "),e("li",[n._v("null 和 undefined 是相等的")]),n._v(" "),e("li",[n._v("在比较相等性前，不能把null 和 undefined 转换成其他值")]),n._v(" "),e("li",[n._v("如果一个数是NaN 则相等操作符会返回false ，不等操作符返回true，且NaN != NaN")])]),n._v(" "),e("p",[n._v('这样我们就可以发现上面的例子中 ![] 将数据转换为Boolean 也就是 !Boolean([]) -- !true --\x3e false\n然后呢 等式就变成了 [] == false --\x3e [] == 0 根据第一条和第三条来看 首先 []是对象 会调用valueOf 得到[] 不是基本类型 继续调用同String（）方法 [].valueOf().toString()，得到空字符串\n"" == 0 然后再根据第二条 Number("") == 0 --\x3e 0 == 0 --\x3e true')]),n._v(" "),e("p",[n._v("这个我们会了 再来个 [undefined] == false.\n你会发现，当我们熟悉这个规则之后是very的easy，very的简单。")]),n._v(" "),e("hr"),n._v(" "),e("h3",{attrs:{id:"scope-作用域"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#scope-作用域"}},[n._v("#")]),n._v(" Scope 作用域")]),n._v(" "),e("p",[n._v("我的理解 作用域类似于一个集合，这个集合显示出的是我们函数或者变量能够访问到的值。\n打个比方说 如果有一个变量a在全局作用域中创建 然后 有一个变量b 在函数foo中创建，然后我们把a的值赋给b,然后我们在foo函数外打印出b，此时会发生什么？")]),n._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[n._v("var a = 1\nfunction foo(){\n  var b = a;\n}\nconsole.log(b)\n")])])]),e("p",[n._v("会报错 b is not defined 对吧 为什么呢？\n我们来看一下这个流程 在全局作用域中 我们能访问到的是不是 { a, foo } 这个\n然后呢 我们再看看 foo 的作用域 { b } 但是 我们的 foo 函数是处于全局作用域下的 所以 他能访问到的作用域 是 [{b},{a,foo}] 这两个\n当我们给 b 赋值 a 时 由于 a 在我们能找到的范围中。 但是 当我们想要在函数外打印出 b 的时候我们发现 b 只能在foo中才能找到，可是\n我们打印实在foo函数外面 所以找不到变量 b 于是就报错了。\n"),e("strong",[n._v("而 foo 访问的作用域 称为作用域链 ScopeChain:[VO(foo),VO(global)].")]),n._v("\n可能会有人认为 我们的 foo 的作用域是含于 全局作用域的，这样是错误的。\n你可以认为形成了一条单向的通道供我们来访问外部的作用域，事实上 是会按照 VO 这个变量对象创建的顺序来访问的 也就是按照作用域链的顺序\n如 在foo函数中 我们给变量b赋值为a 作用域链是[{b},{a,foo}]\n这个时候首先查找了自己的作用域 发现没有 a 于是会继续向上查找 发现 诶全局作用域是有的，然后就拿过来用了。")]),n._v(" "),e("h3",{attrs:{id:"闭包"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#闭包"}},[n._v("#")]),n._v(" 闭包")]),n._v(" "),e("p",[e("strong",[e("a",{attrs:{href:"https://github.com/yygmind/blog/issues/17",target:"_blank",rel:"noopener noreferrer"}},[n._v("可参考此文章"),e("OutboundLink")],1)]),e("br"),n._v("\n闭包是面试时候面试官最喜欢问的面试题之一吧，听说闭包是能将个二十分钟到半个小时的，我们一起来研究一下。争取咱也来个半小时。\n闭包是一种特殊的对象。\n由两个部分组成，一个是函数创建的执行上下文 代号 Alpa 及 在这个执行上下文中创建的函数 代号Beta。\n当Beta这个函数执行并开始访问Alpa中的变量对象的值时，就会发生闭包。 如下：\n我们定义了一个函数foo 并 创建了 a，b 两个变量并赋值，然后在foo 函数内 又定义了一个函数 boo 最后通过 foo 把 boo 函数返回出来。")]),n._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[n._v("  function foo(){\n    var a = 10;\n    var b = 20;\n    \n    function boo(){\n      a ++;\n      b ++;\n      return a + b; \n    }\n    return boo;\n  }\n var sn1 =  foo()\n sn1();\n")])])]),e("p",[n._v("我们来分析一下这个函数\n在全局作用域中 作用域是 { foo,sn1 }\n在foo作用域中 作用域是 { a,b,boo } 作用域链 [{a,b,boo},{foo,sn1}]\n在boo作用域中 因为没有定义新的函数或变量 所以自身的作用域为 { } 但是 boo 是在foo作用域下创建的 自然能够访问到 foo 的作用域 于是 作用域链 [{a,b,boo},{foo,sn1}]\n虽然 foo 这个函数执行会得到 function boo(){a++;b++;return a+b} 这个函数 但是我们的作用域链中是可以访问到 a 和 b 的值的 所以并不会出现爆红的现象。\n如果我们执行boo 就会访问到foo 的内部变量 a,b 这个时候就会产生闭包。\n也就是说当 foo 执行完毕 且已经向外部返回了函数 boo 之后 他的执行上下文确实已经出栈销毁，但是他的激活对象AO并没有销毁，因为boo还保存着对foo内部变量的引用，所以foo\n的AO 会一直存在内存中。")]),n._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[n._v("var func = null\n\nfunction handler() {\n    var a = 0;\n\n    function counter() {\n        return a++;\n    }\n\n    func = counter\n}\n\nhandler();\nconsole.log(func()); //0\nconsole.log(func()); //1\nconsole.log(func()); //2\n")])])]),e("p",[n._v("我们也可以通过闭包来保存我们之前的状态\n如上面这个计数器 虽然 counter 被保存在全局变量func中，但是实际上 counter的作用域还是指向 函数 handler 的 我们只是将 counter 的访问地址付给了全局变量func")]),n._v(" "),e("p",[e("strong",[n._v("闭包的应用：")])]),n._v(" "),e("ul",[e("li",[n._v("函数柯里化 形如  foo()()")]),n._v(" "),e("li",[n._v("模块")])]),n._v(" "),e("p",[n._v("有一个很简单很常见的例子 就是说 如何 让 下面的执行结果是按顺序的")]),n._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[n._v("for (var i = 0; i < 5; i++) {\n        setTimeout(()=>{\n            console.log(i);\n        },1000)\n}\n")])])]),e("p",[n._v("我们可以发现 当你运行这段代码的时候 执行结果是 5 全都是 5。")]),n._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[n._v("//1、可以将 var 改为 let 这样块级作用域就不会出现这种问题\nfor (let i = 0; i < 5; i++) {\n        setTimeout(()=>{\n            console.log(i);\n        },1000)\n}\n\n//2、可以使用立即执行函数，我们可以将 i 作为参数传入到立即执行函数中 此时\nfor (var i = 0; i < 5; i++) {\n    (function (s) {\n        setTimeout(()=>{\n            console.log(s);\n        },1000)\n    })(i)\n}\n")])])]),e("p",[e("strong",[n._v("切记闭包不是真的只让你回答现象，包括了闭包的产生，作用域，作用域链，执行上下文，VO，AO")])]),n._v(" "),e("p",[n._v("《javascript高级编程》中有句话是这么说的：由于闭包会携带包含它的函数的作用域，因此会比其他函数占用更多的资源，过度使用闭包，会导致内存占用过多，造成内存泄漏。")]),n._v(" "),e("p",[n._v("所以要及时的将不用的空间释放。")]),n._v(" "),e("hr"),n._v(" "),e("h3",{attrs:{id:"this-绑定"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#this-绑定"}},[n._v("#")]),n._v(" this 绑定")]),n._v(" "),e("ul",[e("li",[n._v("默认情况（严格模式/非严格模式）")]),n._v(" "),e("li",[n._v("隐式绑定")]),n._v(" "),e("li",[n._v("显式绑定")]),n._v(" "),e("li",[n._v("new关键字绑定")]),n._v(" "),e("li",[n._v("箭头函数（ES6）")])]),n._v(" "),e("h4",{attrs:{id:"默认情况"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#默认情况"}},[n._v("#")]),n._v(" 默认情况")]),n._v(" "),e("p",[e("strong",[n._v("非严格模式：")]),n._v(" 在非严格模式下 this 默认指向全局对象\n"),e("strong",[n._v("严格模式：")]),n._v(" 严格模式下，this 会指向 undefined。在严格模式下嗲用函数不会影响默认绑定。\n如下 1：a 默认为全局变量 运行test函数 此时能够打印出结果1 this 默认情况下指向全局对象\n如下 2：当我们将此函数运行在严格模式时，此时会发现爆红，a is not defined，因为严格模式下不能使用默认情况，此时的 this 指向的是 undefined。")]),n._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[n._v("// 1\na = 1\nfunction test() {\n    console.log(this.a);\n}\n\ntest()\n\n// 2\n'use strict';\na = 1\nfunction test(){\n    console.log(this.a);\n}\ntest()\n")])])]),e("h3",{attrs:{id:"隐式绑定"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#隐式绑定"}},[n._v("#")]),n._v(" 隐式绑定")]),n._v(" "),e("p",[n._v("当函数的引用有"),e("strong",[n._v("上下文对象")]),n._v("，隐式绑定规则会把函数中的this绑定到这个上下文对象。\n如下： 当我们想要使用对象中的name属性时")]),n._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[n._v("var user = {\n    name: 'lilei',\n    sayHi: sayHi\n}\n\nfunction sayHi() {\n    console.log('hello, my name is' + this.name);\n}\n\nuser.sayHi();\n")])])]),e("p",[n._v("但是这样的绑定是不牢固的，在某些特定情况下可能会丢失this的绑定\n这种情况叫做"),e("strong",[n._v("隐式丢失")]),n._v("\n被隐式绑定的函数，如果将引用传递给一个新的变量，那么此时就相当于直接调用函数本身，this 指向 全局对象或 undefined")]),n._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[n._v("var user = {\n    name: 'lilei',\n    sayHi: sayHi\n}\n\nname = 'hanmeimei'\n\nfunction sayHi() {\n    console.log('hello, my name is ' + this.name || '空');\n}\n\nvar handler = user.sayHi;\nhandler()\n")])])]),e("p",[n._v("如下：同上面的情况相同，本质都是直接引用了函数本身，但是通过回调函数传递的方式，实质上相当于变量赋值。")]),n._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[n._v("var user = {\n    name: 'lilei',\n    sayHi: sayHi\n}\n\nname = 'hanmeimei'\n\nfunction sayHi() {\n    console.log('hello, my name is ' + this.name || '空');\n}\n\n\nfunction main(func) {\n    func()\n}\n\nmain(user.sayHi)\n")])])]),e("p",[e("strong",[n._v("显式绑定")]),n._v("：\njavascript中可以通过call，apply方法来改变 this 的指向。\ncall(target,...rest) 第一个参数是我们要指向的目标 ，然后是我们 函数需要接受的参数\n如下 我们定义了一个对象 user 合一个方法 sayName 来输出 对象 user 的名称信息\n然后通过 call 方法来改变 this 的指向让其指向 user")]),n._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[n._v("var user = {\n    name: 'zhangsan'\n}\n\nfunction sayName(age, hobbies) {\n    console.log('hello my name is ' + this.name + ' ' + age + ' ' + hobbies.reduce((prev, item) => prev + ',' + item), '');\n}\n// hello my name is zhangsan 10 football,basketball,swimming \n\nsayName.call(user, 10, ['football', 'basketball', 'swimming'])\n")])])]),e("p",[n._v("apply(target,[...rest]) apply方法和call的功能类似，但是apply如果想要给函数传递参数的话，需要以数组的形式传参\n如下：")]),n._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[n._v("var user = {\n    name: 'zhangsan'\n}\n\nfunction sayName(age, hobbies) {\n    console.log('hello my name is ' + this.name + ' ' + age + ' ' + hobbies.reduce((prev, item) => prev + ',' + item), '');\n}\n\nsayName.apply(user, [10, ['football', 'basketball', 'swimming']])\n")])])]),e("p",[n._v("在隐式绑定的时候会出现丢失this指向的情况。如果我们更换了显示绑定也就是 call、apply还会不会出现呢？")]),n._v(" "),e("p",[e("strong",[n._v("bind")]),n._v("\nbind(target)\nES5中内置了 Function.prototype.bind bing会返回一个绑定了target的函数")]),n._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[n._v("var user = {\n    name: 'zhangsan'\n}\n\nvar user1 = {\n    name: 'linken'\n}\n\nfunction sayName(age, hobbies) {\n    console.log('hello my name is ' + this.name + ' ' + age + ' ' + hobbies.reduce((prev, item) => prev + ',' + item), '');\n}\n\nsayName.apply(user, [10, ['football', 'basketball', 'swimming']])\nsayName.bind(user1)(20, [1, 2, 3])\n")])])]),e("h3",{attrs:{id:"native-code"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#native-code"}},[n._v("#")]),n._v(" native code")]),n._v(" "),e("p",[n._v("我们可以尝试着去实现一下 bind\n首先我们可以看一下 bind 的特征")]),n._v(" "),e("ul",[e("li",[n._v("bind可以被我们的函数调用 说明 在Function原型中")]),n._v(" "),e("li",[n._v("调用bind 需要传入一个参数target")]),n._v(" "),e("li",[n._v("返回一个已经绑定了target的函数")]),n._v(" "),e("li",[n._v("这个返回的函数可以继续传入参数来调用")])]),n._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[n._v("Function.prototype.myBind = function (target) {\n    var _this = this\n    return function () {\n        _this.call(target, ...arguments)\n        // 或是 _this.apply(target,arguments)\n    }\n}\n\nvar user = {\n    name: 'zhangsan'\n}\n\nfunction hello(...rest) {\n    console.log(this, rest);\n}\n\nvar handler = hello.myBind(user)\nhandler(1, 2, 3, 4, 5)\n")])])]),e("p",[n._v("一些内置的api也是有能够改变this指向的参数的 比如：下列代码，这个参数的功能和call 与 apply是")]),n._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[n._v("var user = {\n    name: 'zhangsan'\n}\nvar arr = [1, 2, 3, 4, 5]\narr.forEach(function () {\n    console.log(this);\n}, user)\n")])])]),e("p",[e("strong",[n._v("new关键字来绑定")]),n._v("\n情人节的时候，我们都听过一个梗叫做 new 一个对象出来 那个被 new 的东西叫做构造函数 但是。")]),n._v(" "),e("ul",[e("li",[n._v("js中 ，构造函数只是使用 new 操作符时被调用的 普通函数 （意思就是谁来都一样，只不过后来规定了构造函数需要首字母大写），他们不属于类，也不会实例化类（js是没有类这个概念的，虽然ES6定义了class）")]),n._v(" "),e("li",[n._v("js中内置对象函数也是可以用 new 来调用的 这种称为构造函数调用。")]),n._v(" "),e("li",[n._v("并没有构造函数这个东西，只有"),e("strong",[n._v("构造调用")]),n._v("。")])]),n._v(" "),e("p",[n._v("使用 new 来调用函数，会进行一些操作：")]),n._v(" "),e("ul",[e("li",[n._v("创建一个新对象。")]),n._v(" "),e("li",[n._v("将新对象的原型指向构造函数")]),n._v(" "),e("li",[n._v("将新对象绑定为构造函数的this")]),n._v(" "),e("li",[n._v("如果构造函数返回了其他对象则 不变 否则 返回新对象！")])]),n._v(" "),e("p",[n._v("根据上面的步骤我们来模拟一下 new 关键字")]),n._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[n._v("function myNew(constructor, ...rest) {\n    let obj = {};\n    obj.__proto__ = constructor.prototype;\n    let ret = constructor.apply(obj, rest);\n    return ret instanceof Object ? ret : obj\n}\n\nfunction Person(name, age) {\n    this.name = name;\n    this.age = age;\n}\n\np = myNew(Person, '张三', 18);\nconsole.log(p);\nlet obj = myNew(Object)\nconsole.log(obj);\n")])])]),e("p",[n._v("测试正常！\n"),e("strong",[n._v("代码解析")]),n._v("\n首先创建一个新对象，然后将新对象的原型指向了构造函数，这样我们的对象就能够访问构造函数中的属性，然后 通过 apply 将 对象绑定到了构造函数中 也就是说 对象和构造函数真正的关联起来\n此时 构造函数中的 this 指向了 对象 ，也就相当于 obj['name'] = name;obj['age'] = age; 然后对外返回这个对象或者是构造函数中的对象。")]),n._v(" "),e("p",[n._v("如果 显示改变this指向时传入的是 null 那么默认绑定规则会把this绑定到全局对象中。")]),n._v(" "),e("p",[n._v("更安全的做法是 传入一个空对象，把this绑定到这个对象不会有任何副作用。\nJS中创建一个空对象的方式是Object.create(null) 他会创建一个空对象，但是不会创建Object.prototype 所以 比直接赋值为{}更空 更安全。")]),n._v(" "),e("p",[e("strong",[n._v("间接引用：")])]),n._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[n._v("function test() {\n    var a = 1;\n    var b = { a: 2, foo: foo };\n    var c = { a: 3 };\n\n\n    console.log(b.foo()); // 2\n\n    var s = (c.foo = b.foo)()\n    console.log(s);\n}\n\nfunction foo() {\n    console.log(this);\n    return this.a\n}\n\na = 10\n\ntest()\n")])])]),e("p",[n._v("(c.foo = b.foo)() 相当于直接执行foo函数 this 指向全局对象。")]),n._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[n._v('Function.prototype.myBindTwo = function (obj) {\n    var _this = this\n    var arr = [].slice.call(arguments, 1)\n    var bind_fun = function () {\n        return _this.apply((!this || this === (window || global)) ? obj : this, arr.concat.apply(arr, arguments))\n    }\n    bind_fun.prototype = Object.create(_this.prototype)\n    return bind_fun;\n}\n---------\nfunction foo() {\n    console.log("name:" + this.name);\n}\n\nvar obj = { name: "obj" },\n    obj2 = { name: "obj2" },\n    obj3 = { name: "obj3" };\n\n// 默认绑定，应用软绑定，软绑定把this绑定到默认对象obj\nvar fooOBJ = foo.softBind( obj );\nfooOBJ(); // name: obj \n\n// 隐式绑定规则\nobj2.foo = foo.softBind( obj );\nobj2.foo(); // name: obj2 <---- 看！！！\n\n// 显式绑定规则\nfooOBJ.call( obj3 ); // name: obj3 <---- 看！！！\n\n// 绑定丢失，应用软绑定\nsetTimeout( obj2.foo, 10 ); // name: obj\n')])])])])}),[],!1,null,null,null);a.default=s.exports}}]);