(window.webpackJsonp=window.webpackJsonp||[]).push([[27],{605:function(n,e,t){"use strict";t.r(e);var o=t(15),a=Object(o.a)({},(function(){var n=this,e=n.$createElement,t=n._self._c||e;return t("ContentSlotsDistributor",{attrs:{"slot-key":n.$parent.slotKey}},[t("h2",{attrs:{id:"vue3-中组件的变化"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#vue3-中组件的变化"}},[n._v("#")]),n._v(" Vue3 中组件的变化")]),n._v(" "),t("p",[n._v("Vue router  的一些变化")]),n._v(" "),t("p",[n._v("vue 异步组件")]),n._v(" "),t("p",[n._v("Teleport")]),n._v(" "),t("hr"),n._v(" "),t("ul",[t("li",[t("p",[n._v("首先我们先来看下 vue router 的一些变化")]),n._v(" "),t("p",[n._v("安装的方式 -- https://router.vuejs.org/zh/guide/#javascript")]),n._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[n._v("npm install vue-router@4\n")])])]),t("p",[n._v("首先是创建 Home、About 页面")]),n._v(" "),t("p",[n._v("我们新建一个 views 文件夹存放我们的页面，然后新建Home.vue和About.vue")]),n._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[n._v('// Home.vue\n<template>\n  <div class="common-view default-view">\n    <div class="child-view">\n      <span>子组件：一</span>\n    </div>\n    <div class="child-view">\n      <span>子组件：二</span>\n    </div>\n    <div class="child-view">\n      <span>子组件：三</span>\n    </div>\n    <div class="child-view">\n      <span>子组件：四</span>\n    </div>\n    <div class="child-view">\n      <span>子组件：五</span>\n    </div>\n    <div class="child-view">\n      <span>子组件：六</span>\n    </div>\n  </div>\n</template>\n\n<script>\nexport default {};\n<\/script>\n\n<style scoped>\n.common-view {\n  width: 90%;\n  height: 40%;\n  border: 1px solid #f0f0f0;\n  margin: 0 auto;\n  margin-top: 30px;\n  overflow: hidden;\n}\n.default-view {\n  display: flex;\n  justify-content: space-around;\n  align-items: center;\n  flex-wrap: wrap;\n}\n.child-view {\n  width: 30%;\n  height: 45%;\n  background: #bdcac8;\n  text-align: center;\n  line-height: 158px;\n  border-radius: 8px;\n}\n.child-view span{\n    color: #fff;\n}\n</style>\n')])])]),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[n._v("// About.vue\n<template>\n  <span>this is about view</span>\n</template>\n\n<script>\nexport default {};\n<\/script>\n\n<style scoped>\nspan{\n    font-size: 16px;\n    font-weight: bold;\n}\n</style>\n")])])]),t("p",[n._v("然后新建 Router 文件夹来引入 vue-router")]),n._v(" "),t("p",[n._v("新增 index.js")]),n._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[n._v('import { createRouter, createWebHashHistory } from "vue-router";\nimport routes from "./routes";\n\nconst router = createRouter({\n  history: createWebHashHistory(),\n  routes,\n});\n\nexport default router;\n')])])]),t("p",[n._v("我们可以看到 vue-router 也放弃了构造函数，直接导出的形式来创建 router，")]),n._v(" "),t("p",[n._v("并且 路由的形式是通过 函数创建的方式来使用 createWebHashHistory 这是 Hash 路由")]),n._v(" "),t("p",[n._v("然后在 main.js 中使用 use 来引用我们的插件，符合链式调用的新特性。")]),n._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[n._v('import { createApp } from "vue";\nimport App from "./App.vue";\nimport router from "./Router";\n\nconst app = createApp(App);\n// console.log(app);\napp.use(router).mount("#app");\n\n')])])]),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[n._v('<div class="router-line-edit">\n    <router-link to="/">Home</router-link>\n    |\n    <router-link to="/about">About</router-link>\n  </div>\n  <router-view />\n')])])]),t("p",[n._v("然后在 App.vue 中使用 router ，这里和原来是一致的。")]),n._v(" "),t("p",[n._v("ok 至此 vue-router 成功集成")])]),n._v(" "),t("li",[t("p",[n._v("异步组件")]),n._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[n._v('<template>\n  <div class="common-view default-view">\n    <div class="child-view">\n      <span>子组件：一</span>\n    </div>\n    <div class="child-view">\n      <span>子组件：二</span>\n    </div>\n    \n    <ChildBlock />\n\n    <div class="child-view">\n      <span>子组件：四</span>\n    </div>\n    <div class="child-view">\n      <span>子组件：五</span>\n    </div>\n    <div class="child-view">\n      <span>子组件：六</span>\n    </div>\n  </div>\n</template>\n\n<script>\nimport ChildBlock from "../components/ChildBlock.vue";\nexport default {\n  components: {\n    ChildBlock,\n  },\n};\n<\/script>\n')])])]),t("p",[n._v("我们将组件三改为组件引入方式，但是如果我们的文件过多，全部整合到一个 js 中，会导致 js 文件过大，响应慢，这时候需要按需引用的方式来异步加载我们的组件")]),n._v(" "),t("p",[n._v("这里需要用到 "),t("strong",[n._v("defineAsyncComponent")]),n._v(" 这个成员 他呢接收一个函数并返回一个 Promise")]),n._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[n._v('<script>\nimport { defineAsyncComponent } from "vue";\nconst Block3 = defineAsyncComponent(() =>\n  import("../components/ChildBlock.vue")\n);\nexport default {\n  components: {\n    Block3,\n  },\n};\n<\/script>\n')])])]),t("p",[n._v("刷新之后，我们看到 诶？ 这个效果和之前是一样的呀，")]),n._v(" "),t("p",[n._v("那肯定的，我们在本地加载肯定是很快的，而且 ChildBlock 组件里面东西很少，加载速度会很快，但是我们来到浏览器看到 network 中 ChildBlock是在 Home.vue 之后才加载的")]),n._v(" "),t("p",[n._v("![截屏2022-03-27 上午12.08.22](/Users/lucasy/Desktop/截屏2022-03-27 上午12.08.22.png)")]),n._v(" "),t("p",[n._v("我们来用一些手段模拟一下")]),n._v(" "),t("p",[n._v("新增一个 文件夹 util 和 utils 工具 js")]),n._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[n._v("export function delay() {\n  let duration = random(1000, 4000);\n  return new Promise((resolve) => {\n    setTimeout(() => {\n      resolve();\n    }, duration);\n  });\n}\n\nfunction random(min, max) {\n  return Math.floor(Math.random() * (max - min) + min);\n}\n\n")])])]),t("p",[n._v("然后使用工具函数")]),n._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[n._v('<script>\nimport { delay } from "../util/utils";\nimport { defineAsyncComponent } from "vue";\nconst Block3 = defineAsyncComponent(async () => {\n  await delay();\n  return import("../components/ChildBlock.vue");\n});\nexport default {\n  components: {\n    Block3,\n  },\n};\n<\/script>\n')])])]),t("p",[n._v("这个时候我们会发现，好像是这么回事！")]),n._v(" "),t("p",[n._v("然后 defineAsyncComponent 还可以使用配置的方式来进行定制化")]),n._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[n._v('<script>\nimport { delay } from "../util/utils";\nimport { defineAsyncComponent } from "vue";\nconst Block3 = defineAsyncComponent({\n  loader: async () => {\n    await delay();\n    const comp = import("../components/ChildBlock.vue");\n    return comp;\n  },\n});\nexport default {\n  components: {\n    Block3,\n  },\n};\n<\/script>\n')])])]),t("p",[n._v("两种方式相同，但是这个可以处理比较多的场景，比如说，在组件加载的 pendding 状态，和组件加载后的 error 状态。")]),n._v(" "),t("p",[n._v("加载中")]),n._v(" "),t("p",[n._v("我们新增一个Loading 组件")]),n._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[n._v('<template>\n  <div class="child-view loading">\n    <span>加载中···</span>\n  </div>\n</template>\n<style scoped>\n.loading {\n  background-color: #afb9be;\n}\nspan {\n  color: orange;\n}\n</style>\n')])])]),t("p",[n._v("然后 Home.vue 中的 loadingComponent 配置，这个配置是 组件加载中的状态。")]),n._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[n._v('const Block3 = defineAsyncComponent({\n  loader: async () => {\n    await delay();\n    const comp = import("../components/ChildBlock.vue");\n    return comp;\n  },\n  loadingComponent: Loading,\n});\n')])])]),t("p",[n._v("error状态")]),n._v(" "),t("p",[n._v("我们可以新增一个 error 状态的组件  ，这里 error 使用了插槽的方式来填写")]),n._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[n._v('<template>\n  <div class="child-view loading">\n    <span><slot></slot></span>\n  </div>\n</template>\n<style scoped>\n.loading {\n  background-color: #badbcb;\n}\nspan {\n  color: red;\n}\n</style>\n')])])]),t("p",[n._v("配置，然后 配置 errorComponent，但是我们会发现直接引用组件的话没有办法添加属性，但是组件的创建是不是也是对象？ 我们可以用配置的方式来配置组件 使用 render 函数。但是 由于 render 函数中参数 h 取消 改为 vue 中的 成员，所以要在 vue 中解构 h")]),n._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[n._v('<script>\nimport { delay } from "../util/utils";\nimport { defineAsyncComponent, h } from "vue";\nimport Loading from "../components/Loading.vue";\nimport Error from "../components/Error.vue";\nconst Block3 = defineAsyncComponent({\n  loader: async () => {\n    await delay();\n    throw new Error("error");\n    const comp = import("../components/ChildBlock.vue");\n    return comp;\n  },\n  loadingComponent: Loading,\n  errorComponent: {\n    render() {\n      return h(Error, "组件加载失败！");\n    },\n  },\n});\nexport default {\n  components: {\n    Block3,\n  },\n};\n<\/script>\n')])])]),t("p",[n._v("同理 我们在 App vue 中是否也可以用这种方式来异步加载页面。")]),n._v(" "),t("p",[n._v("但是这样写是否有些麻烦，每次都写一大串，我们简单封装一下。")]),n._v(" "),t("p",[n._v("Utils.js")]),n._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[n._v('export function getAsyncComponent(path) {\n  const Block = defineAsyncComponent({\n    loader: async () => {\n      await delay();\n      throw new ReferenceError("error");\n      const comp = import(path);\n      return comp;\n    },\n    loadingComponent: Loading,\n    errorComponent: {\n      render() {\n        return h(ErrorCom, "组件加载失败！");\n      },\n    },\n  });\n  return Block;\n}\n')])])]),t("p",[n._v("这样可以通过传入路径来获取我们的 异步组件啦！")]),n._v(" "),t("p",[n._v("同理，我们封装一个获取异步页面的函数")]),n._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[n._v("export function getAsyncPage(path) {\n  const Block = defineAsyncComponent({\n    loader: async () => {\n      await delay();\n      const comp = import(path);\n      return comp;\n    }\n  });\n  return Block;\n}\n")])])]),t("p",[n._v("然后 在 routes 中将组件替换为异步获取")]),n._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[n._v('import { getAsyncPage } from "../util/utils";\n\nconst Home = getAsyncPage("../views/Home.vue");\nconst About = getAsyncPage("../views/About.vue");\n\nexport default [\n  { path: "/", component: Home },\n  { path: "/about", component: About },\n];\n')])])]),t("p",[n._v("完整代码：")]),n._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[n._v('import { defineAsyncComponent, h } from "vue";\nimport Loading from "../components/Loading.vue";\nimport ErrorCom from "../components/Error.vue";\nimport "nprogress/nprogress.css";\nimport NProgress from "nprogress";\n\nexport function delay() {\n  let duration = random(1000, 4000);\n  return new Promise((resolve) => {\n    setTimeout(() => {\n      resolve();\n    }, duration);\n  });\n}\n\nfunction random(min, max) {\n  return Math.floor(Math.random() * (max - min) + min);\n}\n\nexport function getAsyncComponent(path) {\n  const Block = defineAsyncComponent({\n    loader: async () => {\n      NProgress.start();\n      await delay();\n      const comp = import(path);\n      NProgress.start();\n      return comp;\n    },\n    loadingComponent: Loading,\n    errorComponent: {\n      render() {\n        return h(ErrorCom, "组件加载失败！");\n      },\n    },\n  });\n  return Block;\n}\n\nexport function getAsyncPage(path) {\n  const Block = defineAsyncComponent({\n    loader: async () => {\n      NProgress.start();\n      await delay();\n      const comp = import(path);\n      NProgress.done();\n      return comp;\n    },\n  });\n  return Block;\n}\n\n')])])])]),n._v(" "),t("li",[t("p",[n._v("Teleport")]),n._v(" "),t("p",[n._v("Teleport 有什么作用呢？")]),n._v(" "),t("p",[n._v("我们用一个例子来讲述一下。")]),n._v(" "),t("p",[n._v("首先创建一个MaskView组件，全局蒙版")]),n._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[n._v('//MaskView.vue\n<template>\n  <div class="mask">\n    <slot></slot>\n  </div>\n</template>\n<style scoped>\n.mask {\n  position: fixed;\n  left: 0;\n  top: 0;\n  width: 100%;\n  height: 100%;\n  background-color: rgba(0, 0, 0, 0.5);\n}\n</style>\n')])])]),t("p",[n._v("这就是一个模糊的蒙版")]),n._v(" "),t("p",[n._v("然后我们在 Home 页面导入 MaskView 组件，然后新增一个按钮来使蒙版显示或隐藏。")]),n._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[n._v('<button @click="onMaskShow">show mask</button>\n<mask-view v-show="maskRef">\n      <button @click="onMaskOff">turn off</button>\n    </mask-view>\n    \n   setup() {\n    const maskRef = ref(false);\n\n    const onMaskShow = () => {\n      maskRef.value = true;\n    };\n\n    const onMaskOff = () => {\n      maskRef.value = false;\n    };\n\n    return {\n      maskRef,\n      onMaskShow,\n      onMaskOff,\n    };\n  },\n')])])]),t("p",[n._v("项目跑起来之后我们可以观察一下项目结构，")]),n._v(" "),t("p",[n._v("很明显我们的 MaskView 是在 app Home 页面下的对吧，")]),n._v(" "),t("p",[n._v("但是这个 MaskView 是不是应该在 body 下面呢？")]),n._v(" "),t("p",[n._v("以前我们 Vue 不可能实现这个功能，模板结构，即页面逻辑。")]),n._v(" "),t("p",[n._v("但是现在不一样了，Vue3 中提供给我们一种新的组件，这是一个内置的全局组件Teleport, 我们可以用它来帮助我们，改变页面构造")]),n._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[n._v('  <Teleport to="body">\n    <mask-view v-show="maskRef">\n      <button @click="onMaskOff">turn off</button>\n    </mask-view>\n  </Teleport>\n')])])]),t("p",[n._v("ok 这就可以了， Teleport 存在一个属性 to 意思是去哪。")])])])])}),[],!1,null,null,null);e.default=a.exports}}]);