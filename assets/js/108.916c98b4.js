(window.webpackJsonp=window.webpackJsonp||[]).push([[108],{697:function(t,a,e){"use strict";e.r(a);var n=e(10),l=Object(n.a)({},(function(){var t=this,a=t.$createElement,e=t._self._c||a;return e("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[e("h3",{attrs:{id:"plugin"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#plugin"}},[t._v("#")]),t._v(" Plugin")]),t._v(" "),e("p",[t._v("plugin 其实就是一个 带有 apply 方法的对象")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("module.exports = class MyPlygin {\n\tapply(compiler){\n\t\t// compilation\n\t}\n}\n")])])]),e("p",[t._v("Web pack 会在初始化阶段生成编译对象 compiler ，整个编译过程只会生成一个 compiler（只有一次初始化）。")]),t._v(" "),e("p",[t._v("apply 函数 会在创建好 compiler 对象后运行。")]),t._v(" "),e("p",[t._v("后续的打包流程都是由另一个对象（compilation）负责（生成 chunk，合成资源）")]),t._v(" "),e("p",[t._v("可以通过在 apply 函数中注册事件来参与编译过程。具体格式：")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("compiler.hooks.事件名称.事件类型(name,function (compilation){\n\t\t// \n})\n")])])]),e("p",[t._v("编译过程的干涉")]),t._v(" "),e("p",[t._v("通过 compiler 注册 beforeRun 在编译前添加一个钩子函数。")]),t._v(" "),e("p",[t._v("拿到 生成的 compilation ，然后注册 compilation 的事件来干涉编译过程。")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("module.exports = class MyPlugin{\n\tapply(compiler){\n\t\tcompiler.hooks.beforeRun.tab('add-event',function (compilation){\n\t\t // 注册 compilation 事件。\n\t\t})\n\t}\n}\n")])])]),e("p",[e("strong",[t._v("webpack 就是通过各种事件来干预打包的过程。")])])])}),[],!1,null,null,null);a.default=l.exports}}]);