(window.webpackJsonp=window.webpackJsonp||[]).push([[15],{604:function(e,a,l){"use strict";l.r(a);var t=l(10),n=Object(t.a)({},(function(){var e=this,a=e.$createElement,l=e._self._c||a;return l("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[l("h3",{attrs:{id:"loader"}},[l("a",{staticClass:"header-anchor",attrs:{href:"#loader"}},[e._v("#")]),e._v(" Loader")]),e._v(" "),l("ol",[l("li",[e._v("入口")]),e._v(" "),l("li",[e._v("检查文件是否存在 chunk 模块列表")]),e._v(" "),l("li",[e._v("读取文件内容\n"),l("ol",[l("li",[e._v("在进行抽象语法树之前会匹配 loader 规则进行代码转换")]),e._v(" "),l("li",[e._v("loader 规则是 从下到上,从前往后（数组）进行匹配。")])])]),e._v(" "),l("li",[e._v("AST 语法树分析")]),e._v(" "),l("li",[e._v("denpendencise 记录依赖")]),e._v(" "),l("li",[e._v("转换后的函数添加进 chunk 模块列表")]),e._v(" "),l("li",[e._v("递归便利 denpendencies 中的依赖文件")]),e._v(" "),l("li",[e._v("回到 步骤2 继续执行")])]),e._v(" "),l("p",[e._v("Loader 本质就是一个函数,Loader 的作用在于转换代码。将代码转换成我们想要的样子，比如 将 ¥ a = 1 转换成 var a = 1")]),e._v(" "),l("div",{staticClass:"language- extra-class"},[l("pre",{pre:!0,attrs:{class:"language-text"}},[l("code",[e._v("\n")])])])])}),[],!1,null,null,null);a.default=n.exports}}]);