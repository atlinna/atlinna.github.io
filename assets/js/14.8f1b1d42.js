(window.webpackJsonp=window.webpackJsonp||[]).push([[14],{602:function(t,e,a){"use strict";a.r(e);var s=a(7),n=Object(s.a)({},(function(){var t=this,e=t.$createElement,a=t._self._c||e;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h1",{attrs:{id:"组件开发"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#组件开发"}},[t._v("#")]),t._v(" 组件开发")]),t._v(" "),a("h2",{attrs:{id:"为什么会出现组件"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#为什么会出现组件"}},[t._v("#")]),t._v(" 为什么会出现组件")]),t._v(" "),a("p",[t._v("html 开发 粗粒子 单位是整个项目\nVue 框架开发 划分为 细粒子 单位是 组件")]),t._v(" "),a("ul",[a("li",[t._v("组件 可以复用")])]),t._v(" "),a("p",[t._v("组件的实质 就是一个对象")]),t._v(" "),a("p",[t._v("注册组件的方式")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v(" let myBtn = {\n     data(){\n         return {\n             \x3c!-- 数据 --\x3e\n         }\n     },\n     template:``,//组件模板\n }\n\n 1、全局注册 Vue.component('组件名称‘,myBtn)\n 2、局部注册 Vue 中存在components 属性 来注册局部组件\n\n")])])]),a("h2",{attrs:{id:"命名方法"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#命名方法"}},[t._v("#")]),t._v(" 命名方法")]),t._v(" "),a("ul",[a("li",[t._v("短横线命名发 my-btn")]),t._v(" "),a("li",[t._v("大驼峰命名法 MyBtn\n大驼峰支持短横线 但是短横线不支持大驼峰")])]),t._v(" "),a("h2",{attrs:{id:"props-属性"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#props-属性"}},[t._v("#")]),t._v(" props 属性")]),t._v(" "),a("ul",[a("li",[t._v("支持 数组方式 缺点没有验证")]),t._v(" "),a("li",[t._v("对象模式 可以更灵活的对传入属性添加校验")])]),t._v(" "),a("h2",{attrs:{id:"vue-cli-解决了打包问题-模板预编译"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#vue-cli-解决了打包问题-模板预编译"}},[t._v("#")]),t._v(" Vue-Cli 解决了打包问题 模板预编译")]),t._v(" "),a("p",[t._v("流程为：\n源代码 --》 打包 --》 js 代码 --》运行\nVue-Cli 在打包的时候会将 template 转换为 render 函数 --》模板预编译\n优点：")]),t._v(" "),a("ul",[a("li",[t._v("运行时不再需要编译模板，提高了运行效率")]),t._v(" "),a("li",[t._v("打包结果中不再需要模板的编译代码，减少了打包体积")])]),t._v(" "),a("p",[a("strong",[t._v("也就是说 如果 Vue 中还存在 template 这个属性的配置时 会报错 因为已经不存在 template 的编译器")])]),t._v(" "),a("h1",{attrs:{id:"计算属性-computed"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#计算属性-computed"}},[t._v("#")]),t._v(" 计算属性 computed")]),t._v(" "),a("p",[t._v("计算属性是什么？\n计算属性的原理就是缓存了依赖属性的结果")]),t._v(" "),a("p",[t._v("为什么要使用计算属性？\n比如")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("this.name = 'y'\nthis.lastName = 'cy'\n如果我要在页面上展示全名的话可能会用到methods {{getFullName()}}\n如下\nmethods:{\n    getFullName(){\n        return  this.name + ' ' + this.lastName\n    }\n}\n\n但是这样的话存在一个弊端就是如果我这个重用的次数很多的话 那getFullName属性就会多次调用 浪费了渲染性能\n\n这个时候可以使用计算属性 它会将依赖项的结果计算出来 然后进行缓存 也就是说不管重用多少次 都只计算一次结果。 只运行一次\n如果 计算属性中的依赖项没有发生变化 计算属性也不会重新运行\ncomputed:{\n    fullName(){\n        return this.name + ' ' + this.lastName //name 和 lastName 属性值不变的话 计算结果不变 不会重新运行\n    }\n}\ncomputed 计算属性的实质就像是 defineProperty\nObject.defineProperty('属性名’,{\n    get(){\n\n    },\n    set(){\n\n    }\n})\ncomputed:{\n    fullName(){\n        get(){\n            return this.name + ' ' + this.lastName\n        },\n        set(val){\n            \x3c!-- 这里接受的val 就是 this.fullName='xxx' 中的xxx --\x3e\n        }\n    }\n}\n")])])]),a("p",[a("strong",[t._v("面试题：计算属性和方法有什么区别")])]),t._v(" "),a("ul",[a("li",[t._v("计算属性本质上是包含 getter 和 setter 方法的。")]),t._v(" "),a("li",[t._v("当获取计算属性时，实际上是在运行计算属性的 getter 方法，Vue 会收集计算属性的依赖，并缓存计算属性的结果，只有当依赖变化后才会重新计算结果。")]),t._v(" "),a("li",[t._v("方法没有缓存每次调用都会执行。")]),t._v(" "),a("li",[t._v("计算属性的 getter 和 setter 的参数是固定的 而方法的参数是不确定的 可以有多个\n**\n实际上 计算属性可以当做是属性 可以读取也可以赋值，但是 方法是一个操作 只能调用\n**")])]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("computed:{\n\n}\n")])])]),a("h3",{attrs:{id:"动态绑定-class-类名"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#动态绑定-class-类名"}},[t._v("#")]),t._v(" 动态绑定 class 类名")]),t._v(" "),a("p",[a("strong",[t._v("见文档 绑定 HTML Class")])]),t._v(" "),a("h3",{attrs:{id:"组件作用域"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#组件作用域"}},[t._v("#")]),t._v(" 组件作用域")]),t._v(" "),a("ul",[a("li",[t._v("style 中存在 scoped 属性 添加之后再生成 css 的时候模仿 css module 的方式生成一个属性 来让 css 只针对当前作用域")]),t._v(" "),a("li",[t._v("如果想要在父作用域对子组件中的样式进行修改的话可以在父组件中 style 添加 scoped 属性 子组件添加 scoped 属性 这样的话 就可以只影响子组件的根节点修改其样式")])]),t._v(" "),a("h3",{attrs:{id:"练习"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#练习"}},[t._v("#")]),t._v(" 练习：")]),t._v(" "),a("p",[t._v("1、头像组件\n2、图标组件")])])}),[],!1,null,null,null);e.default=n.exports}}]);