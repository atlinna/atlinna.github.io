(window.webpackJsonp=window.webpackJsonp||[]).push([[85],{674:function(e,n,t){"use strict";t.r(n);var a=t(10),r=Object(a.a)({},(function(){var e=this,n=e.$createElement,t=e._self._c||n;return t("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[t("h2",{attrs:{id:"生成器-generator"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#生成器-generator"}},[e._v("#")]),e._v(" 生成器 Generator")]),e._v(" "),t("p",[e._v("生成器是一个通过构造函数 "),t("code",[e._v("Generator")]),e._v(" 创建得对象。\n生成器即是一个迭代器（即内部含有 next 方法），同时又是一个可迭代对象（即具有知名符号 Symbol.iterator）。")]),e._v(" "),t("h3",{attrs:{id:"如何创建生成器"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#如何创建生成器"}},[e._v("#")]),e._v(" 如何创建生成器")]),e._v(" "),t("p",[e._v("生成器得创建，必须使用生成器函数（Generator Function）")]),e._v(" "),t("h3",{attrs:{id:"如何书写一个生成器函数"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#如何书写一个生成器函数"}},[e._v("#")]),e._v(" 如何书写一个生成器函数")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("  function *method(){}\n")])])]),t("h3",{attrs:{id:"生成器函数内部如何执行"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#生成器函数内部如何执行"}},[e._v("#")]),e._v(" 生成器函数内部如何执行")]),e._v(" "),t("p",[e._v("生成器函数内部是为了给生成器得每次迭代提供数据。\n每次调用生成器得 next 方法，将导致生成器函数运行到下一个 yield 关键字位置。\nyield 是一个关键字，改关键字只能在生成器函数内部使用，表达“产生”一个迭代数据。")]),e._v(" "),t("p",[e._v("一种语法糖，方便我们产生迭代数据")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("function* method() {\n    console.log(1);\n    yield 1;\n    console.log(2);\n    yield 2;\n    console.log(3);\n}\n")])])]),t("h3",{attrs:{id:"生成器细节"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#生成器细节"}},[e._v("#")]),e._v(" 生成器细节")]),e._v(" "),t("ul",[t("li",[e._v("生成器可以有返回值，这个值会作为第一次 done 返回 true 得 value 得值。 "),t("strong",[e._v("只有第一次，后面还是会为 undefined")])]),e._v(" "),t("li",[e._v("生成器得next 方法可以传入参数，这个参数会作为 yield 表达式得返回值。")]),e._v(" "),t("li",[e._v("首次调用next 方法传入参数是无效得。")]),e._v(" "),t("li",[e._v("生成器内部可以调用其他生成器。 "),t("code",[e._v("yield * method()")]),e._v(" 相当于把代码直接粘贴过来")])]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("function* test() {\n    console.log('first');\n    let info = yield 1;\n    console.log('second');\n    info = yield info + 2;\n    console.log('third');\n    info = yield info * 5;\n    console.log('end');\n    return 'end'\n}\n\nvar gen = test()\nconsole.log(gen.next()); // 1\nconsole.log(gen.next(5)); // 7\nconsole.log(gen.next(2)); // 10\nconsole.log(gen.next(2)); // end\n")])])]),t("h3",{attrs:{id:"其他-api"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#其他-api"}},[e._v("#")]),e._v(" 其他 Api")]),e._v(" "),t("p",[e._v("1、 return 方法，提前结束生成器得迭代过程。\n2、 throw 方法，在生成器内部抛出异常。")]),e._v(" "),t("h3",{attrs:{id:"生成器异步控制"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#生成器异步控制"}},[e._v("#")]),e._v(" 生成器异步控制")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("function call(generatorFunc) {\n    let generator = generatorFunc();\n    let result = generator.next();\n\n    const handler = () => {\n        if (result.done) return;\n        // 处理返回值为 Promise 得情况\n        if (typeof result.value.then == 'function') {\n            result.value.then(data => {\n                result = generator.next(data)\n                handler(result);\n            }).catch(err => {\n                generator.throw(err)\n            })\n        } else {\n            // 处理其他情况\n            result = generator.next(result.value);\n            handler(result);\n        }\n    }\n\n    handler(result);\n}\n\n")])])])])}),[],!1,null,null,null);n.default=r.exports}}]);