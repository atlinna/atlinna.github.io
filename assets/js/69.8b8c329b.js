(window.webpackJsonp=window.webpackJsonp||[]).push([[69],{658:function(t,e,r){"use strict";r.r(e);var a=r(7),s=Object(a.a)({},(function(){var t=this,e=t.$createElement,r=t._self._c||e;return r("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[r("h3",{attrs:{id:"什么是动态规划"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#什么是动态规划"}},[t._v("#")]),t._v(" 什么是动态规划")]),t._v(" "),r("p",[t._v("动态规划(dynamic programming)是运筹学的一个分支，是求解决策过程(decision process)最优化的数学方法。\n20世纪50年代初美国数学家R.E.Bellman等人在研究多阶段决策过程(multistep decision process)的优化问题时，提出了著名的最优化原理(principle of optimality)，把多阶段过程转化为一系列单阶段问题，利用各阶段之间的关系，逐个求解，创立了解决这类过程优化问题的新方法——动态规划。")]),t._v(" "),r("p",[t._v("计算机归根结底只会做一件事：穷举。\n所有的算法都是在让计算机【如何聪明地穷举】而已，动态规划也是如此。")]),t._v(" "),r("h3",{attrs:{id:"状态转移方程"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#状态转移方程"}},[t._v("#")]),t._v(" 状态转移方程")]),t._v(" "),r("p",[t._v("这里，引出「状态转移方程」这个名词，实际上就是描述问题结构的数学形式：")]),t._v(" "),r("p",[t._v("可见列出「状态转移方程」的重要性，它是解决问题的核心。")]),t._v(" "),r("p",[t._v("很容易发现，其实状态转移方程直接代表着暴力解法。")]),t._v(" "),r("p",[t._v("千万不要看不起暴力破解，动态规划问题最困难的就是写出状态转移方程，")]),t._v(" "),r("h3",{attrs:{id:"题库"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#题库"}},[t._v("#")]),t._v(" 题库")]),t._v(" "),r("ul",[r("li",[r("a",{attrs:{href:"https://leetcode-cn.com/problems/generate-parentheses/",target:"_blank",rel:"noopener noreferrer"}},[t._v("22.括号生成"),r("OutboundLink")],1)]),t._v(" "),r("li")])])}),[],!1,null,null,null);e.default=s.exports}}]);