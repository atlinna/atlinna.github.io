(window.webpackJsonp=window.webpackJsonp||[]).push([[84],{673:function(n,t,e){"use strict";e.r(t);var a=e(10),r=Object(a.a)({},(function(){var n=this,t=n.$createElement,e=n._self._c||t;return e("ContentSlotsDistributor",{attrs:{"slot-key":n.$parent.slotKey}},[e("h2",{attrs:{id:"节流函数-throttle"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#节流函数-throttle"}},[n._v("#")]),n._v(" 节流函数 throttle")]),n._v(" "),e("p",[n._v("定义：\n函数节流指的是某个函数在一段时间间隔内（如五秒）只能执行一次，在这五秒内无视后来产生的函数调用请求，也不会延长时间间隔。五秒时间过了之后如果还有函数进来，则重新进入同样的流程。\n我们举个例子来理解以下：\n我们有车的朋友应该知道高速公路的收费站对吧 平时是收费的，但是如果到了节假日就会发现免费通行，好~ 。可是当我们正常工作日去的时候。他会把我们拦在收费站前，然后前面一辆车就潇洒离场，假设我们每辆车缴费的时间都是一致的情况下，设想以下，每隔一段时间才能通过一辆车。\n如果上面这个例子读了后还无法理解的话，那么只能再给老板们手绘一张图了\n首先我们定义一个场景，就是有一个按钮，按钮绑定了一个点击事件 handleClick ok  开始")]),n._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[n._v("s: 秒\n                5s               5s\n        ·1·   -----\x3e    ·2·   -------\x3e  ·3·\n    handleClick --\x3e handleClick --\x3e handleClick  ······ 以此类推\n")])])]),e("p",[n._v("正常情况下如果我们疯狂点击这个按钮，他就会一直出发按钮所绑定的点击事件。但是如果我们加入节流之后，当我们再次点击按钮会发现只能触发几次而已。  这就是节流函数。")]),n._v(" "),e("h2",{attrs:{id:"原理"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#原理"}},[n._v("#")]),n._v(" 原理：")]),n._v(" "),e("p",[n._v("函数节流非常适用于函数被频繁调用的场景，例如 window.onresize() 、 mousemove() 事件 、上传进度等等。那么如何来实现一个 throttle 函数呢\n实现的方案有两种：")]),n._v(" "),e("ul",[e("li",[n._v("1、通过时间戳来判断是否已经能够执行函数，记录上次执行的时间戳，然后每次出发事件执行回调函数，回调函数中判断当前事件戳距离上次执行的时间差值是否为我们的间距，如果是，则执行并更新上次执行的时间戳。")]),n._v(" "),e("li",[n._v("2、通过定时器来实现，创建执行标志和定时器当定时器跑完将标志置为 false 定时器中则为 true ，定时器时间为我们的时间间隔，定时器跑完重新执行函数时再次设置定时器。")])]),n._v(" "),e("p",[n._v("这里我们通过第一种方式实现 throttle")]),n._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[n._v("/**\n * \n * @param {可执行的回调函数} callback \n * @param {时间间隔} wait \n */\n\nfunction throttle(callback, wait) {\n  let previous = 0;\n  return function (...args) {\n    let now = + new Date()\n    if (now - previous > wait) {\n      previous = now\n      callback.apply(this, args)\n    }\n  }\n}\n\n\nlet so = throttle(function () {\n  console.log(1)\n}, 1000)\n\n// setInterval(so, 100)\n")])])]),e("p",[e("strong",[n._v("underscore 源码")]),e("br"),n._v(" "),e("a",{attrs:{href:"https://github.com/yygmind/blog/issues/38",target:"_blank",rel:"noopener noreferrer"}},[n._v("underscore - 源码"),e("OutboundLink")],1)]),n._v(" "),e("h3",{attrs:{id:"防抖-debounce"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#防抖-debounce"}},[n._v("#")]),n._v(" 防抖 - debounce")]),n._v(" "),e("p",[n._v("上面我们介绍了节流，这次我们来认识一下防抖。\n**防抖函数 debounce 指的是某个函数在某段时间内，无论触发多少次，都只执行最后一个回调。**假设我们有一个搜索框，我们监听了搜索框的输入事件，这样只要开始输入就会我们就会去发送接口查询内容对吧？ 但是如果我连续的输入很多字符那么这个接口是不是和我们输入的字符相关，有多少字符就会调用多少次接口，这样加大了我们服务器的压力。如果我们设置一个时间为1s的计时器，在 1s 内如果还会调用这个函数，就清除定时器重新计时，否则当定时器计时完毕运行回调函数，方法执行。")]),n._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[n._v("function debounce(fn, wait) {\n  let timer = null\n  return function () {\n    if (timer) clearTimeout(timer)\n\n    timer = setTimeout(() => {\n      fn.apply(this, Array.prototype.slice.call(arguments))\n    }, wait)\n  }\n}\n\nvar f = debounce(function () {\n  console.log(123);\n}, 1000)\n\n\nvar count = 0;\nvar t = setInterval(function () {\n  count += 1\n  if (count > 11) {\n    clearInterval(t)\n  } else {\n    f()\n  }\n}, 800)\n")])])]),e("p",[n._v("如果想要第一次出发回调事件，需要改写一下 debounce 函数，加上第一次触发立即执行的功能。")]),n._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[n._v("function debounce(fn, wait, immediate) {\n  let timer = null\n  return function () {\n    let args = Array.prototype.slice.call(arguments);\n    if (timer) clearTimeout(timer);\n    if (immediate && !timer) {\n      fn.apply(this, args);\n    }\n\n    timer = setTimeout(() => {\n      fn.apply(this, args);\n    }, wait)\n  }\n}\n\nvar f = debounce(function () {\n  console.log(123);\n}, 1000, true)\n\n\nvar count = 0;\nvar t = setInterval(function () {\n  count += 1\n  if (count > 11) {\n    clearInterval(t)\n  } else {\n    f()\n  }\n}, 800)\n")])])]),e("p",[e("a",{attrs:{href:"https://github.com/yygmind/blog/issues/39",target:"_blank",rel:"noopener noreferrer"}},[n._v("underscore - debounce"),e("OutboundLink")],1)])])}),[],!1,null,null,null);t.default=r.exports}}]);