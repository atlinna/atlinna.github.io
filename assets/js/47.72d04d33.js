(window.webpackJsonp=window.webpackJsonp||[]).push([[47],{636:function(a,t,e){"use strict";e.r(t);var s=e(7),l=Object(s.a)({},(function(){var a=this,t=a.$createElement,e=a._self._c||t;return e("ContentSlotsDistributor",{attrs:{"slot-key":a.$parent.slotKey}},[e("h2",{attrs:{id:"对象"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#对象"}},[a._v("#")]),a._v(" 对象")]),a._v(" "),e("h3",{attrs:{id:"语法"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#语法"}},[a._v("#")]),a._v(" 语法")]),a._v(" "),e("p",[a._v("对象可以通过两种形式定义：声明（文字）形式和构造形式。\n对象的文字语法：")]),a._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v("  var obj = {};\n")])])]),e("p",[a._v("构造形式：")]),a._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v("  var obj = new Object();\n")])])]),e("p",[a._v("构造形式和文字形式生成的对象是一样的。唯一的区别是，在文字声明中你可以添加多个键 / 值对，但是在构造形式中你必须逐个添加属性。")]),a._v(" "),e("h3",{attrs:{id:"类型"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#类型"}},[a._v("#")]),a._v(" 类型")]),a._v(" "),e("p",[a._v("在 JavaScript 中一共有六种主要类型（术语是“语言类型”）")]),a._v(" "),e("ul",[e("li",[a._v("String")]),a._v(" "),e("li",[a._v("Boolean")]),a._v(" "),e("li",[a._v("Number")]),a._v(" "),e("li",[a._v("null")]),a._v(" "),e("li",[a._v("undefined")]),a._v(" "),e("li",[a._v("object")])]),a._v(" "),e("p",[a._v("其中 String、Boolean、Number、null、undefined。 是基本数据类型，本身并不是对象。")]),a._v(" "),e("p",[a._v('null 有时会被当作一种对象类型，但是这其实只是语言本身的一个 bug，即对 null 执行typeof null 时会返回字符串 "object" 。 1 实际上， null 本身是基本类型。')]),a._v(" "),e("p",[a._v("JavaScript 中有许多特殊的对象子类型，我们可以称之为复杂基本类型。")]),a._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v("  函数就是对象的一个子类型（从技术角度来说就是“可调用的对象”）。JavaScript 中的函\n  数是“一等公民”，因为它们本质上和普通的对象一样（只是可以调用），所以可以像操作\n  其他对象一样操作函数（比如当作另一个函数的参数）。\n  \n  数组也是对象的一种类型，具备一些额外的行为。数组中内容的组织方式比一般的对象要\n  稍微复杂一些。\n")])])])])}),[],!1,null,null,null);t.default=l.exports}}]);