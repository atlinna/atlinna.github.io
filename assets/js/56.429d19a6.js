(window.webpackJsonp=window.webpackJsonp||[]).push([[56],{645:function(a,e,t){"use strict";t.r(e);var s=t(7),n=Object(s.a)({},(function(){var a=this,e=a.$createElement,t=a._self._c||e;return t("ContentSlotsDistributor",{attrs:{"slot-key":a.$parent.slotKey}},[t("h2",{attrs:{id:"ts-中常用的基本类型"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#ts-中常用的基本类型"}},[a._v("#")]),a._v(" TS 中常用的基本类型")]),a._v(" "),t("ul",[t("li",[a._v("number        数字")]),a._v(" "),t("li",[a._v("string        字符串")]),a._v(" "),t("li",[a._v("boolean       布尔值 true/false")]),a._v(" "),t("li",[a._v("字面量         限制变量的值就是该字面量的值")]),a._v(" "),t("li",[a._v("any           任意类型")]),a._v(" "),t("li",[a._v("unknown       类型安全的 any")]),a._v(" "),t("li",[a._v("void          没有值（或 undefined）")]),a._v(" "),t("li",[a._v("never         不能是任何值")]),a._v(" "),t("li",[a._v("object        js 对象")]),a._v(" "),t("li",[a._v("array         js 数组")]),a._v(" "),t("li",[a._v("tuple         js 元组（定长的数组类似于 Python中的 Tuple 表现形式为：[1,2]）")]),a._v(" "),t("li",[a._v("enum          枚举")])]),a._v(" "),t("h3",{attrs:{id:"联合类型"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#联合类型"}},[a._v("#")]),a._v(" 联合类型")]),a._v(" "),t("p",[a._v("通过 “或运算符” 来连接多个类型")]),a._v(" "),t("h4",{attrs:{id:"字面量"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#字面量"}},[a._v("#")]),a._v(" 字面量")]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("let sex: 'man' | 'woman'\nsex = 'man';\nsex = 'woman';\n")])])]),t("h4",{attrs:{id:"any"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#any"}},[a._v("#")]),a._v(" any")]),a._v(" "),t("p",[a._v("任意类型，不做任何类型限制。")]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("let a:any;\na = 1;\na = 'str';\na = true;\n")])])]),t("p",[a._v("如果声明时不指定任意类型的话，ts解析器会隐式的将变量设置为 any 类型")]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("let a;\n// 此时 a 的类型是 any\n")])])]),t("p",[a._v("变量赋值")]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("let a;\nlet b:string\na = 10\nb = a;\n// 并不会报错\n")])])]),t("h4",{attrs:{id:"unknown"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#unknown"}},[a._v("#")]),a._v(" unknown")]),a._v(" "),t("p",[a._v("任意类型，只作用于本身，不能直接赋值给其他变量")]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("let s:unknown;\ns = 10;\nlet a:string;\na = s;\n// 会报错 Type 'unknown' is not assignable to type 'string'.\n")])])]),t("h4",{attrs:{id:"类型断言"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#类型断言"}},[a._v("#")]),a._v(" 类型断言")]),a._v(" "),t("p",[a._v("使用 as 来告诉解析器我们的 unknow 的变量是一个什么类型(或使用 "),t("Type",[a._v(")")])],1),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("let s: unknown;\ns = 10;\nlet a: string;\na = <string>s;\na = s as string;\n")])])]),t("p",[a._v("或使用 typeof 来判断变量的类型")]),a._v(" "),t("h4",{attrs:{id:"void-和-never"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#void-和-never"}},[a._v("#")]),a._v(" void 和 never")]),a._v(" "),t("p",[a._v("当函数没有返回值的时候 使用 void")]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("function foo() :void{\n   // return\n}\n")])])]),t("p",[a._v("或者是当函数返回 undefined、null")]),a._v(" "),t("p",[a._v("never 是不会有任何返回值,多用于抛出异常")]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("function test():never{\n    throw Error('err')\n}\n")])])]),t("h4",{attrs:{id:"object"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#object"}},[a._v("#")]),a._v(" object")]),a._v(" "),t("p",[a._v("在 JS 中一切皆对象，如果给一个变量限制为 object 没有任何作用。")]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("let a: object;\na = [];\na = function () { }\na = new Date()\n// 并不会报错\n")])])]),t("p",[a._v("我们主要是为了限制对象中属性的类型，那么可以这样来限制对象的结构：")]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("let a: {\n    name: string,\n    age: number\n}\n\na = { name: 'zhang san', age: 18 }\n")])])]),t("p",[a._v("但是这样做的话，你的类型定义的结构和赋值后对象的结构必须保持一致。如果不同会报错。")]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("let a: {\n    name: string,\n    age: number\n}\n\na = { name: 'zhang san', age: 18, home: 'shen zhen' }\n// 报错\n")])])]),t("p",[a._v("可以通过 ？ 将参数类型变为可选")]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("let a: {\n    name: string,\n    age: number,\n    home?: string\n}\n\na = { name: 'zhang san', age: 18 }\n// 不会报错\n")])])]),t("p",[a._v("如果有多个未知的属性，或者说只限制某几个属性的话可以使用这种方式：")]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("let a: {\n    name: string,\n    [propnames: string]: string | number, // 可以使用 any 表示不对其他属性做任何限制。\n}\n\na = { name: 'zhang san', age: 18, home: 'shen zhen' }\n")])])]),t("h4",{attrs:{id:"函数限制"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#函数限制"}},[a._v("#")]),a._v(" 函数限制")]),a._v(" "),t("p",[a._v("使用箭头函数的形式来返回对函数的结构限制\n括号内是对参数结构的限制，箭头处是对返回值的限制。")]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("let foo: (a: number, b: string) => string;\nfoo = function (a, b) {\n    return 's'\n}\n")])])]),t("h4",{attrs:{id:"数组的限制"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#数组的限制"}},[a._v("#")]),a._v(" 数组的限制")]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("let foo: string[];\nlet boo: Array<number | string>\nboo = [1, 2, 3, 4, '5']\nfoo = ['1', '2']\n")])])]),t("h4",{attrs:{id:"tuple-元组"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#tuple-元组"}},[a._v("#")]),a._v(" tuple 元组")]),a._v(" "),t("p",[a._v("元组比较像坐标形如 [1,2]")]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("let n: [number, string]\nn = [1, '2']\n")])])]),t("h4",{attrs:{id:"enum-枚举"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#enum-枚举"}},[a._v("#")]),a._v(" enum 枚举")]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("enum Flower {\n    rose = 0,\n    jasmine = 1\n}\n\nlet a: { flower: Flower }\na = {\n    flower: 0\n}\n")])])]),t("h4",{attrs:{id:"运算符连接条件"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#运算符连接条件"}},[a._v("#")]),a._v(" & 运算符连接条件")]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("enum Flower {\n    rose = 0,\n    jasmine = 1\n}\n\nlet a: { flower: Flower } & { name: string }\na = {\n    flower: 0,\n    name:'zhang san'\n}\n")])])]),t("h4",{attrs:{id:"类型别名"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#类型别名"}},[a._v("#")]),a._v(" 类型别名")]),a._v(" "),t("p",[a._v("简化操作")]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("type flowes = 1 | 10 | 100 | 1000 | 10000\n\nlet a: flowes = 1;\nlet b: flowes = 10;\nlet c: flowes = 100;\nlet d: flowes = 1000;\nlet e: flowes = 10000;\n")])])])])}),[],!1,null,null,null);e.default=n.exports}}]);