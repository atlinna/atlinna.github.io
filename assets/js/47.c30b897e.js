(window.webpackJsonp=window.webpackJsonp||[]).push([[47],{636:function(e,a,n){"use strict";n.r(a);var t=n(7),r=Object(t.a)({},(function(){var e=this,a=e.$createElement,n=e._self._c||a;return n("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[n("h2",{attrs:{id:"对象"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#对象"}},[e._v("#")]),e._v(" 对象")]),e._v(" "),n("h3",{attrs:{id:"语法"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#语法"}},[e._v("#")]),e._v(" 语法")]),e._v(" "),n("p",[e._v("对象可以通过两种形式定义：声明（文字）形式和构造形式。\n对象的文字语法：")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("  var obj = {};\n")])])]),n("p",[e._v("构造形式：")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("  var obj = new Object();\n")])])]),n("p",[e._v("构造形式和文字形式生成的对象是一样的。唯一的区别是，在文字声明中你可以添加多个键 / 值对，但是在构造形式中你必须逐个添加属性。")]),e._v(" "),n("h3",{attrs:{id:"类型"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#类型"}},[e._v("#")]),e._v(" 类型")]),e._v(" "),n("p",[e._v("在 JavaScript 中一共有六种主要类型（术语是“语言类型”）")]),e._v(" "),n("ul",[n("li",[e._v("String")]),e._v(" "),n("li",[e._v("Boolean")]),e._v(" "),n("li",[e._v("Number")]),e._v(" "),n("li",[e._v("null")]),e._v(" "),n("li",[e._v("undefined")]),e._v(" "),n("li",[e._v("object")])]),e._v(" "),n("p",[e._v("其中 String、Boolean、Number、null、undefined。 是基本数据类型，本身并不是对象。")]),e._v(" "),n("p",[e._v('null 有时会被当作一种对象类型，但是这其实只是语言本身的一个 bug，即对 null 执行typeof null 时会返回字符串 "object" 。 1 实际上， null 本身是基本类型。')]),e._v(" "),n("p",[e._v("JavaScript 中有许多特殊的对象子类型，我们可以称之为复杂基本类型。")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("  函数就是对象的一个子类型（从技术角度来说就是“可调用的对象”）。JavaScript 中的函\n  数是“一等公民”，因为它们本质上和普通的对象一样（只是可以调用），所以可以像操作\n  其他对象一样操作函数（比如当作另一个函数的参数）。\n  \n  数组也是对象的一种类型，具备一些额外的行为。数组中内容的组织方式比一般的对象要\n  稍微复杂一些。\n")])])]),n("p",[n("strong",[e._v("为什么 null 是 对象类型 object")])]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("  原理是这样的，不同的对象在底层都表示为二进制，在 JavaScript 中二进制前三位都为 0 的话会被判\n  断为 object 类型， null 的二进制表示是全 0，自然前三位也是 0，所以执行 typeof 时会返回“ object ”。\n")])])]),n("h3",{attrs:{id:"内置对象"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#内置对象"}},[e._v("#")]),e._v(" 内置对象")]),e._v(" "),n("p",[e._v("JavaScript 中还有一些对象子类型，通常被称为内置对象。有些内置对象的名字看起来和简单基础类型一样，不过实际上它们的关系更复杂")]),e._v(" "),n("ul",[n("li",[e._v("String")]),e._v(" "),n("li",[e._v("Number")]),e._v(" "),n("li",[e._v("Boolean")]),e._v(" "),n("li",[e._v("Object")]),e._v(" "),n("li",[e._v("Function")]),e._v(" "),n("li",[e._v("Array")]),e._v(" "),n("li",[e._v("Date")]),e._v(" "),n("li",[e._v("RegExp")]),e._v(" "),n("li",[e._v("Error")])]),e._v(" "),n("p",[e._v("这些内置对象从表现形式来说很像其他语言中的类型（type）或者类（class），比如 Java 中的 String 类。\n它们实际上只是一些内置函数。这些内置函数可以当作构造函数（由 new 产生的函数调用——参见第 2 章）来使用，从而可以构造一个对应子类型的新对象。")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("  var strObj = new String('abc')\n  console.log(strObj instanceof Object);\n\n  var str = String('abc')\n  console.log(str, strObj);\n")])])]),n("p",[n("strong",[e._v("注意：如果使用 new 操作符来调用的话，那么得到的将会是一个对象，如果不使用 new 来调用，那么将会得到一个显式转换成相应数据类型的数据。")])]),e._v(" "),n("p",[e._v("在必要时语言会自动把字符串字面量转换成一个 String 对象，也就是说你并不需要显式创建一个对象。JavaScript 社区中的大多数人都认为能使用文字形式时就不要使用构造形式。")]),e._v(" "),n("p",[e._v("同样的事也会发生在数值字面量上，如果使用类似 42.359.toFixed(2) 的方法，引擎会把42 转换成 new Number(42) 。对于布尔字面量来说也是如此。")]),e._v(" "),n("p",[e._v("null 和 undefined 没有对应的构造形式，它们只有文字形式。相反， Date 只有构造，没有文字形式。")]),e._v(" "),n("p",[e._v("对于 Object 、 Array 、 Function 和 RegExp （正则表达式）来说，无论使用文字形式还是构造形式，它们都是对象，不是字面量。\n在某些情况下，相比用文字形式创建对象，构造形式可以提供一些额外选项。\n由于这两种形式都可以创建对象，所以我们首选更简单的文字形式。\n建议只在需要那些额外选项时使用构造形式。")]),e._v(" "),n("p",[e._v("Error 对象很少在代码中显式创建，一般是在抛出异常时被自动创建")]),e._v(" "),n("h3",{attrs:{id:"内容"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#内容"}},[e._v("#")]),e._v(" 内容")]),e._v(" "),n("p",[e._v("对象的内容是由一些存储在特定命名位置的（任意类型的）值组成的，我们称之为属性。")]),e._v(" "),n("p",[e._v("当我们说“内容”时，似乎在暗示这些值实际上被存储在对象内部，但是这只是它的表现形式。\n在引擎内部，这些值的存储方式是多种多样的，一般并不会存在对象容器内部。\n存储在对象容器内部的是这些属性的名称，它们就像指针（从技术角度来说就是引用）一样，指向这些值真正的存储位置。")]),e._v(" "),n("p",[e._v("假如我们有一个对象 obj ：")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v('  var oj = {\n    "a":2\n  }\n')])])]),n("p",[e._v("如果要访问 obj 中 a 位置上的值，我们需要使用 "),n("strong",[e._v(".")]),e._v(" 或 "),n("strong",[e._v("[]")]),e._v(' 操作符。\n.a 语法通常被称为“属性访问”， ["a"] 语法通常被称为“键访问”。')]),e._v(" "),n("h4",{attrs:{id:"可计算属性名"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#可计算属性名"}},[e._v("#")]),e._v(" 可计算属性名")]),e._v(" "),n("p",[e._v("ES6 增加了可计算属性名，可以在文字形式中使用 [] 包裹一个表达式来当作属性名")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("  var keygen = Symbol('key')\n  var obj = {\n      [keygen]: 'hello this is key of Symbol'\n  }\n  console.log(obj[keygen])\n")])])]),n("h4",{attrs:{id:"属性和方法"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#属性和方法"}},[e._v("#")]),e._v(" 属性和方法")]),e._v(" "),n("p",[e._v("从技术角度来说，函数永远不会“属于”一个对象，所以把对象内部引用的函数称为“方法”似乎有点不妥。")]),e._v(" "),n("p",[e._v("确实，有些函数具有 this 引用，有时候这些 this 确实会指向调用位置的对象引用。\n但是这种用法从本质上来说并没有把一个函数变成一个“方法”，因为 this 是在运行时根据调用位置动态绑定的，所以函数和对象的关系最多也只能说是间接关系。")]),e._v(" "),n("p",[e._v("最保险的说法可能是，“函数”和“方法”在 JavaScript 中是可以互换的。")]),e._v(" "),n("p",[e._v("ES6 增加了 super 引用，一般来说会被用在 class 中。\nsuper 的行为似乎更有理由把 super 绑定的函数称为“方法”。\n但是再说一次，这些只是一些语义（和技术）上的微妙差别，本质是一样的。")]),e._v(" "),n("h4",{attrs:{id:"复制对象"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#复制对象"}},[e._v("#")]),e._v(" 复制对象")]),e._v(" "),n("p",[e._v("首先，我们应该判断它是浅复制还是深复制。\n对于 JSON 安全（也就是说可以被序列化为一个 JSON 字符串并且可以根据这个字符串解\n析出一个结构和值完全一样的对象）的对象来说，有一种巧妙的复制方法")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("  var newObj = JSON.parse( JSON.stringify( someObj ) );\n")])])]),n("p",[e._v("当然，这种方法需要保证对象是 JSON 安全的，所以只适用于部分情况。")]),e._v(" "),n("p",[e._v("相比深复制，浅复制非常易懂并且问题要少得多，所以 ES6 定义了 Object.assign(..) 方法来实现浅复制。\nObject.assign(..) 方法的第一个参数是目标对象，之后还可以跟一个或多个源对象。\n它会遍历一个或多个源对象的所有可枚举（enumerable，参见下面的代码）的自有键（owned key，很快会介绍）并把它们复制（使用 = 操作符赋值）\n到目标对象，最后返回目标对象。")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("  var newObj = Object.assign( {}, {a:2},{b:3} );\n")])])]),n("h4",{attrs:{id:"属性描述符"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#属性描述符"}},[e._v("#")]),e._v(" 属性描述符")]),e._v(" "),n("p",[e._v("在 ES5 之前，JavaScript 语言本身并没有提供可以直接检测属性特性的方法，比如判断属性是否是只读。\n但是从 ES5 开始，所有的属性都具备了属性描述符。\n获取对象属性描述符可以使用 "),n("code",[e._v('Object.getOwnPropertyDescriptor(obj,"prop")')]),e._v("\n如下,我们获取了一下 obj 对象的 name 属性的属性描述符：")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v('  var obj = {\n   "name":"zhang san"\n  };\n  console.log(Object.getOwnPropertyDescriptor(obj,"name"));\n  /*\n    {\n      configurable: true,\n      enumerable: true,\n      value: "zhangsan",\n      writable: true\n    }\n  */\n')])])]),n("p",[e._v("它除了包含属性值之外还包括另外三个特性：")]),e._v(" "),n("ul",[n("li",[e._v("writable  可写")]),e._v(" "),n("li",[e._v("enumerable 可枚举")]),e._v(" "),n("li",[e._v("configurable 可配置")])]),e._v(" "),n("p",[e._v("在创建普通属性时属性描述符会使用默认值，我们也可以使用 Object.defineProperty(..)来添加一个新属性或者修改一个已有属性（如果它是 configurable ）并对特性进行设置。\n如：")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("  var obj = {}\n  Object.defineProperty(obj, \"name\", {\n      value: 'zhang san',\n      writable: true,\n      enumerable: true,\n      configurable: true,\n  })\n  console.log(obj, Object.getOwnPropertyDescriptor(obj, 'name'))\n")])])]),n("p",[n("strong",[e._v("1、Writable 决定是否可以修改属性的值")])]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("  var obj = {}\n  Object.defineProperty(obj, \"name\", {\n      value: 'zhang san',\n      writable: false,\n      enumerable: true,\n      configurable: true,\n  })\n  console.log(obj,)\n  obj.name = 'lisa'\n  console.log(obj);\n")])])]),n("p",[e._v("如你所见，我们对属性值的修改静默失败（silently failed），如果在严格模式下，这种方法会报错。")]),e._v(" "),n("p",[n("strong",[e._v("2、Configurable 决定我们的属性描述符是否可以配置")])]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("  var obj = {}\n  Object.defineProperty(obj, \"name\", {\n      value: 'zhang san',\n      writable: true,\n      enumerable: true,\n      configurable: false,\n  })\n  Object.defineProperty(obj, 'name', {\n      value: 'wang wu',\n      writable: false,\n      configurable: false,\n      enumerable: false\n  })\n  console.log(obj)\n  obj.name = 'lisa'\n  console.log(Object.getOwnPropertyDescriptor(obj, 'name'));\n")])])]),n("p",[e._v("我们发现最后一个 Object.defineProperty() 抛出了一个 TypeError 告诉我们不能重复定义属性描述符\n"),n("strong",[e._v("注意：如你所见，把 configurable 修改成false 是单向操作，无法撤销！")])]),e._v(" "),n("p",[e._v("但是有一个例外，如果我们只修改 writable 这个特性的话，是不会抛出这个 TypeError 的。但只限于将 writable 由 true 改为 false。")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("  var obj = {}\n  Object.defineProperty(obj, \"name\", {\n      value: 'zhang san',\n      writable: true,\n      enumerable: true,\n      configurable: false,\n  })\n  Object.defineProperty(obj, 'name', {    // 正常修改\n      writable: false,\n  })\n  Object.defineProperty(obj, 'name', {    // TypeError \n      writable: true,\n  })\n")])])]),n("p",[e._v("除了不能修改配置之外，还会影响 delete 删除。因为属性是不可配置。")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("  var obj = {}\n  Object.defineProperty(obj, \"name\", {\n      value: 'zhang san',\n      writable: true,\n      enumerable: true,\n      configurable: false,\n  })\n\n  console.log(obj)\n  delete obj.name\n  console.log(obj);\n")])])]),n("p",[e._v("delete 只用来直接删除对象的（可删除）属性。如果对象的某个属性是某个对象 / 函数的最后一个引用者，对这个属性执行 delete 操作之后，这个未引用的对象 / 函\n数就可以被垃圾回收。但是，不要把 delete 看作一个释放内存的工具（就像 C/C++ 中那样），它就是一个删除对象属性的操作，仅此而已。")]),e._v(" "),n("p",[n("strong",[e._v("3、Enumerable 决定属性是否可枚举")]),e._v("\n从名字就可以看出，这个描述符控制的是属性是否会出现在对象的属性枚举中，比如说for..in 循环。\n如果把 enumerable 设置成 false ，这个属性就不会出现在枚举中，虽然仍然可以正常访问它。相对地，设置成 true 就会让它出现在枚举中。")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("  var obj = {}\n  Object.defineProperty(obj, \"name\", {\n      value: 'zhang san',\n      writable: true,\n      enumerable: true,\n      configurable: true,\n  })\n  Object.defineProperty(obj, 'age', {\n      value: 18,\n      writable: true,\n      configurable: true,\n      enumerable: false\n  })\n\n  for (const prop in obj) {\n      console.log(prop, 'enumerable') // name\n  }\n\n  console.log(Object.keys(obj)) // ['name']\n  console.log(obj); // {name: \"zhang san\", age: 18}\n")])])]),n("h4",{attrs:{id:"不变性"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#不变性"}},[e._v("#")]),e._v(" 不变性")]),e._v(" "),n("p",[e._v("所有的方法创建的都是浅不变形，也就是说，它们只会影响目标对象和它的直接属性。\n如果目标对象引用了其他对象（数组、对象、函数，等），其他对象的内容不受影响，仍然是可变的")]),e._v(" "),n("p",[e._v("在 JavaScript 程序中很少需要深不可变性。\n有些特殊情况可能需要这样做，但是根据通用的设计模式，如果你发现需要密封或者冻结所有的对象，那\n你或许应当退一步，重新思考一下程序的设计，让它能更好地应对对象值的改变。")]),e._v(" "),n("p",[n("strong",[e._v("1、对象常量")]),e._v("\n结合 writable:false 和 configurable:false 就可以创建一个真正的常量属性（不可修改、重定义或者删除）")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("  var obj = {}\n  Object.defineProperty(obj, 'name', {\n      writable: false,\n      value: 10,\n      configurable: false,\n      enumerable: true\n  })\n")])])]),n("p",[n("strong",[e._v("2、禁止扩展")])]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("  var obj = {}\n  Object.preventExtensions(obj)\n  obj.a = 1\n  obj.b = 2\n  console.log(obj)\n")])])]),n("p",[e._v("在非严格模式下，创建属性 b 会静默失败。在严格模式下，将会抛出 TypeError 错误。")]),e._v(" "),n("p",[n("strong",[e._v("3、密封")]),e._v("\nObject.seal(..) 会创建一个“密封”的对象，这个方法实际上会在一个现有对象上调用Object.preventExtensions(..) 并把所有现有属性标记为 configurable:false 。\n密封之后不仅不能添加新属性，也不能重新配置或者删除任何现有属性（虽然可以修改属性的值）。")]),e._v(" "),n("p",[n("strong",[e._v("4、冻结")]),e._v("\nObject.freeze(..) 会创建一个冻结对象，这个方法实际上会在一个现有对象上调用Object.seal(..) 并把所有“数据访问”属性标记为 writable:false ，这样就无法修改它们的值。")]),e._v(" "),n("p",[e._v("这个方法是你可以应用在对象上的级别最高的不可变性，它会禁止对于对象本身及其任意直接属性的修改（不过就像我们之前说过的，这个对象引用的其他对象是不受影响的）。")]),e._v(" "),n("p",[e._v("你可以“深度冻结”一个对象，具体方法为，首先在这个对象上调用 Object.freeze(..) ，然后遍历它引用的所有对象并在这些对象上调用 Object.freeze(..) 。但是一定要小心，因\n为这样做有可能会在无意中冻结其他（共享）对象。")])])}),[],!1,null,null,null);a.default=r.exports}}]);