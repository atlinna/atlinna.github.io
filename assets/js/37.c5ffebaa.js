(window.webpackJsonp=window.webpackJsonp||[]).push([[37],{627:function(n,a,t){"use strict";t.r(a);var e=t(7),r=Object(e.a)({},(function(){var n=this,a=n.$createElement,t=n._self._c||a;return t("ContentSlotsDistributor",{attrs:{"slot-key":n.$parent.slotKey}},[t("h1",{attrs:{id:"javascript-高阶函数"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#javascript-高阶函数"}},[n._v("#")]),n._v(" Javascript - 高阶函数")]),n._v(" "),t("p",[n._v("这一章主要给大家介绍一下 Javascript 中的高阶函数， 在 Javascript 中，函数是一种特殊类型的对象，称为 Function Objects。")]),n._v(" "),t("h3",{attrs:{id:"高阶函数"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#高阶函数"}},[n._v("#")]),n._v(" 高阶函数")]),n._v(" "),t("p",[n._v("什么是高阶函数呢？如何判断一个函数是不是高阶函数？\n高阶函数要满足以下两个条件：")]),n._v(" "),t("ul",[t("li",[n._v("接受一个或多个函数作为输入")]),n._v(" "),t("li",[n._v("输出一个函数")])]),n._v(" "),t("p",[n._v("就是说高阶函数是对其他函数进行操作的函数，可以将他们作为参数传递，或者是返回他们。\n总结起来就是，高阶函数是一个接受函数作为参数或将函数作为返回值输出的函数。")]),n._v(" "),t("h3",{attrs:{id:"内置高阶函数-built-in"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#内置高阶函数-built-in"}},[n._v("#")]),n._v(" 内置高阶函数（built-in）")]),n._v(" "),t("p",[n._v("Javascript 语言内置了一些高阶函数，比如 Array.prototype.map, Array.prototype.filter, Array.prototype.reduce, 他们接受一个函数作为参数，并应用这个函数到列表的每一个元素。\n接下来我们对比一下使用高阶函数和不使用高阶函数。")]),n._v(" "),t("p",[t("strong",[n._v("Array.prototype.map")]),t("br"),n._v("\nmap 方法创建一个新的数组，返回的结果是该数组中的每项都调用一个提供的函数后返回的结果，原数组不会改变，原数组不会改变。 传递给 map 的回调函数有三个参数，分别是 item（项），index（索引、可选），self（自身数组、可选），map 方法除了可以接受一个回调函数外还能接受一个 this 值（可选），用来执行回调函数中使用的 this。")]),n._v(" "),t("p",[n._v("练习：我们要生成一个新数组，数组中的每一项都是 arr 中的每一项的两倍。")]),n._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[n._v("\x3c!-- 不使用高阶函数 --\x3e\nvar arr = [1, 2, 3, 4];\nvar brr = []\n\nfor (var i = 0; i < arr.length; i++) {\n    brr.push(arr[i] * 2)\n}\n\nconsole.log(brr, arr); //(4) [2, 4, 6, 8] (4) [1, 2, 3, 4]\n\n\n\x3c!-- 使用高阶函数 --\x3e\nvar arr = [1, 2, 3, 4];\n\nvar brr = arr.map(function (item, index, self) {\n    return item * 2\n})\n\nconsole.log(brr, arr); //(4) [2, 4, 6, 8] (4) [1, 2, 3, 4]\n")])])]),t("p",[t("strong",[n._v("Array.prototype.filter")]),t("br"),n._v("\nfilter 方法创建一个新数组，其包含通过提供函数实现的过滤元素，原数组不会改变。参数同 map 相同，返回值是个新数组、 数组中是由符合条件的项构成，如果都不符合，则数组为空。")]),n._v(" "),t("p",[n._v("练习：\n现有一个数组 [1,2,3,1,2,3,1,1,1,2,3,4,5,6,2,2,4,5] , 我们想要生成一个新数组，这个数组要去重（去掉重复的内容）。")]),n._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[n._v("\x3c!-- 不使用高阶函数 --\x3e\nvar arr = [1, 2, 3, 1, 2, 3, 1, 1, 1, 2, 3, 4, 5, 6, 2, 2, 4, 5];\n\nvar brr = [];\n\nfor (var i = 0; i < arr.length; i++) {\n    if (brr.indexOf(arr[i]) === -1) {\n        brr.push(arr[i])\n    }\n}\n\nconsole.log(brr, arr); // (6) [1, 2, 3, 4, 5, 6] \n\n\n\x3c!-- 使用高阶函数 --\x3e\nvar arr = [1, 2, 3, 1, 2, 3, 1, 1, 1, 2, 3, 4, 5, 6, 2, 2, 4, 5];\n\nvar brr = arr.filter(function (item, index, self) {\n    return self.indexOf(item) === index;\n})\n\nconsole.log(brr, arr); // (6) [1, 2, 3, 4, 5, 6] \n/*\n  解析：\n  为什么这样可以去重？\n  因为 self 代表的是原数组本身 也就是 arr \n  arr.indexOf(item) 返回的是第一个符合元素的索引\n  也就是说只要不重复那么 arr.indexOf(item) 的值就会等于 index\n*/\n\n")])])]),t("p",[t("strong",[n._v("Array.prototype.reduce")]),t("br"),n._v("\nreduce 方法对数组中的每个元素执行一个传入的 callback 函数，并返回单个的经过 callback 处理过的结果。传递给 reduce 的回调函数 callback 接受四个参数，分别是 prev（累加器 | 前一个结果）,\nitem（遍历项），index（索引），self（数组本身），reduce 除了接受一个回调函数 callback 外，还会接受一个"),t("strong",[n._v("初始值 initialValue")]),n._v("。")]),n._v(" "),t("ul",[t("li",[n._v("如果没有提供 initialValue，在第一次调用 callback 函数时，prev 使用原数组中的第一个元素，item 则是数组中的第二项。如果调用 reduce 的数组是空数组，则会报错。")]),n._v(" "),t("li",[n._v("如果提供了 initialValue ，那么 initialValue 将会在 reduce 调用的第一次作为 prev 的值，item则是数组第一项。")])]),n._v(" "),t("p",[n._v("练习：\n现有一数组 arr = [1,2,3,4,5] 将数组内的每一项相加 计算 数组中的合\n使用高阶函数：")]),n._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[n._v("var arr = [1, 2, 3, 4, 5]\n\n/**\n * prev 前一项\n * item 遍历项\n * index 索引\n * self 数组本身 --》 arr\n */\nvar ret = arr.reduce(function (prev, item, index, self) {\n  return prev + item\n}, 0)\n\nconsole.log(ret); // 15\n/*\n  计算过程：\n  第一次 因为 我们传入了 initialValue\n  prev = 0, item = 1 相当于 prev = prev + item\n  第二次 \n  prev = 1 item = 2 prev = prev + item\n   ·\n   ·\n   ·\n  prev = 10 item = 5 prev = prev + item\n  return prev\n*/\n")])])]),t("p",[n._v("不使用高阶函数:")]),n._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[n._v("var ret2 = 0\nfor (var i = 0; i < arr.length; i++) {\n  ret2 += arr[i]\n}\n\nconsole.log(ret2); // 15\n")])])]),t("h3",{attrs:{id:"函数作为返回值输出"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#函数作为返回值输出"}},[n._v("#")]),n._v(" 函数作为返回值输出")]),n._v(" "),t("p",[n._v("这个很好理解，就是函数中返回一个函数。")]),n._v(" "),t("h4",{attrs:{id:"istype-函数"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#istype-函数"}},[n._v("#")]),n._v(" isType 函数")]),n._v(" "),t("p",[n._v("通常，我们在判断类型的时候 会使用 Object.prototype.toString.call() 来得到对应对象的返回值，通过这个返回值来确定我们的数据类型。")]),n._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[n._v("    console.log(Object.prototype.toString.call(1));                         // [object Number]\n    console.log(Object.prototype.toString.call('str'));                     // [object String]\n    console.log(Object.prototype.toString.call(true));                      // [object Boolean]\n    console.log(Object.prototype.toString.call(Symbol('1')));               // [object Symbol]\n    console.log(Object.prototype.toString.call(null));                      // [object Null]\n    console.log(Object.prototype.toString.call(undefined));                 // [object Undefined]\n    console.log(Object.prototype.toString.call({}));                        // [object Object]\n    console.log(Object.prototype.toString.call([]));                        // [object Array]\n    console.log(Object.prototype.toString.call(function () { }));           // [object Function]\n    console.log(Object.prototype.toString.call(new Date()));                // [object Date]\n")])])]),t("p",[n._v("我们发现通过这个对立关系可以封装一个判断数据类型的函数\n于是：")]),n._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[n._v("function isType(type) {\n  var isType_t = '';\n  switch (type) {\n    case 'number':\n      isType_t = '[object Number]';\n      break;\n    case 'string':\n      isType_t = '[object String]';\n      break\n    case 'boolean':\n      isType_t = '[object Boolean]';\n      break;\n    case 'symbol':\n      isType_t = '[object Symbol]';\n      break;\n    case 'null':\n      isType_t = '[object Null]';\n      break\n    case 'undefined':\n      isType_t = '[object Undefined]';\n      break;\n    case 'object':\n      isType_t = '[object Object]';\n      break\n    case 'array':\n      isType_t = '[object Array]';\n      break\n    case 'function':\n      isType_t = '[object Function]';\n      break\n    case 'date':\n      isType_t = '[object Date]';\n      break\n  }\n  return function (params) {\n    return Object.prototype.toString.call(params) === isType_t;\n  }\n}\n\nconsole.log(isType('array')([]));\n")])])]),t("p",[n._v("优化：")]),n._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[n._v("function isType(type) {\n  return function (params) {\n    return Object.prototype.toString.call(params) === '[object ' + type + ']';\n  }\n}\n\nconsole.log(isType('Array')([]));\n")])])]),t("p",[n._v("练习2：\n用 js 实现一个无限累加的函数 add 形式如下：")]),n._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[n._v("add(1)\nadd(1)(2)\nadd(1)(2)(3)\nadd(1)(2)(3)(4)\n")])])]),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[n._v("function add(a) {\n  function sum(b) {\n    a = a + b\n    return sum\n  }\n\n  sum.toString = function () {\n    return a\n  }\n\n  return sum\n}\n\n\nconsole.log(add(1)(2));\n")])])]),t("p",[n._v("思考：\n现有一个数组 arr = [[1,2,3],[4,5,6],[7,[8,9,[10]]]]\n如何将数组扁平化")]),n._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[n._v("var arr = [[1, 2, 3], [4, 5, 6], [7, [8, 9, [10]]]]\n\nconsole.log(arr.toString().split(',').map(Number));\nconsole.log(arr.flat(Infinity));\n")])])]),t("p",[n._v("两种方式 均能满足。如需更多， "),t("strong",[t("a",{attrs:{href:"https://es6.ruanyifeng.com/#docs/array",target:"_blank",rel:"noopener noreferrer"}},[n._v("点击劫里噢~"),t("OutboundLink")],1)])]),n._v(" "),t("hr"),n._v(" "),t("h3",{attrs:{id:"柯里化"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#柯里化"}},[n._v("#")]),n._v(" 柯里化")]),n._v(" "),t("p",[n._v("什么是柯里化？\n柯里化又叫部分求值，维基百科中对柯里化的定义是这样的：\n"),t("strong",[n._v("在数学和计算机科学中，柯里化是一种将使用多个参数的函数转换成一系列使用一个参数的函数，并且返回接受余下的参数而且返回结果的新函数的技术。")])]),n._v(" "),t("p",[n._v("通俗来讲就是只传递给函数一部分参数来调用它，让它返回一个新函数去处理剩下的参数。\n如：")]),n._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[n._v("const add = (...args)=> args.reduce((a,b)=> a + b)\n\nadd(1,2) // 3\n\nvar sum = currying(add)\nvar ret = sum(1)\nsum(2)\nsum(3)\nsum()\n")])])]),t("p",[n._v("请实现上述代码中 currying 函数")]),n._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[n._v("function currying(add) {\n  const m = []\n  return function result(...args) {\n    if (args.length === 0) {\n      return add(...(m.flat(Infinity)))\n    } else {\n      m.push(args)\n      return result\n    }\n  }\n}\n\n// 测试 ----------------------------------------------\nconst add = (...args) => args.reduce((a, b) => a + b)\n\n// console.log(add(1, 2)); // 3\n\nvar sum = currying(add)\nvar ret1 = sum(1)  // 1\nsum(2)(1)\nsum(3, 4, 5)\nconsole.log(sum());  // 3\n")])])]),t("p",[n._v("上述代码其实很好理解 currying 函数 接受了一个函数 add 内部 使用闭包保存参数， 当传入参数的数量足够执行函数时，开始执行函数。\n上面 currying 函数实现是一种简化的写法，判断传入的参数长度是否大于0 如果为 0 则执行 否则进行参数收集。")]),n._v(" "),t("p",[t("strong",[n._v("另一种常见的应用是 bind 函数")]),n._v("，我们应该还记得 bind 的作用是返回一个可执行的函数，修改 this 指向我们的目标对象，我们来看一下 bind 的使用：")]),n._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[n._v("function sayName() {\n  console.log(this.name);\n}\n\nvar ob1 = {\n  name: 'zhang san',\n}\n\nvar ob2 = {\n  name: 'li si'\n}\n\n\nsayName.call(ob1) // zhang san\nvar fun = sayName.bind(ob2)\nfun()  // li si\n\n")])])]),t("p",[n._v("首先我们看到 我们用两种方式来演示 一种是 call ，一种是 bind。首先如果不改变 sayName 中 this 的指向，this 会指向全局对象，全局对象中没有 name 属性，所以是 undefined\n再看下面 ，使用 call 执行代码时，函数执行，但是 当我们使用 bind 的时候，没有直接执行，而是返回了一个可执行的函数，这其实就是一种柯里化。 bind 的模拟实现和柯里化函数的实现，其核心都是一致的。")]),n._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[n._v("Function.prototype.binds = function () {\n  var target = Array.prototype.shift.call(arguments)\n  var args = Array.prototype.slice.call(arguments)\n  var self = this;\n\n  return function (...params) {\n    return self.apply(target, args.concat(params))\n  }\n}\n\nfunction name(params) {\n  console.log(this.name);\n}\n\nvar ob1 = {\n  name: 'zhang san'\n}\n\n\nvar func = name.binds(ob1)\nfunc()\n")])])]),t("p",[t("strong",[n._v("参数复用")]),t("br"),n._v("\n我们知道调用 toString() 可以获取每个对象的类型，但是不同对象的 toString() 有不同的实现，所以需要通过 Object.prototype.toString() 来获取 Object 上的实现， 同时以 call / apply 的形式来调用，并传递要检查的对象作为第一个参数。\n如下：")]),n._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[n._v("function isArray(params) {\n  return Object.prototype.toString.call(params) === '[object Array]'\n}\n\nconsole.log(isArray([1, 2]));\nconsole.log(isArray({}));\nconsole.log(isArray(1));\n")])])]),t("p",[n._v("但是这样会存在一个问题，"),t("strong",[n._v("不够灵活")]),n._v("，假如说我们现在要检查很多类型，那我们每个类型都要去定义一个方法去判断吗？\n那肯定是不行的，所以我们就来换一种方式")]),n._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[n._v("var getType = Function.prototype.call.bind(Object.prototype.toString)\n\nconsole.log(getType([1, 2]));\n")])])]),t("p",[n._v("这里我们使用 bind 来扩展，优点是可以直接使用改造后的函数\n使用 Function.prototype.call 函数指定一个 this 值，然后 .bind 返回一个新的函数，始终将 Object.prototype.toString 设置为传入参数，其实等价于 Object.prototype.toString.call()。")]),n._v(" "),t("p",[t("strong",[n._v("实现currying函数")]),t("br"),n._v("\n开始我们用简单的方式粗略的实现了一个 currying 函数，接下来我们完善以下 currying 将他封装的更加健壮\n首先我们知道柯里化函数的实质就是"),t("strong",[n._v("通过闭包收集参数，并将参数集中起来处理，最后返回我们需要的结果")]),n._v("。\n那么我们 currying 函数的原理就是通过闭包搜集参数，当参数足够时执行传入函数。")]),n._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[n._v("function currying(fn, length) {\n  length = length || fn.length   // 获取参数的长度\n  return function (...args) {\n    return args.length >= length ?\n      fn.apply(this, args) : currying(fn.bind(this, ...args), length - args.length)\n  }\n}\n\n\nvar func = currying(function (a, b, c) {\n  console.log([a, b, c]);\n})\n\n// func('a', 'b', 'c')\n// func('a', 'b')('c')\n// func('a')('c')('b')\n")])])]),t("p",[n._v("currying 函数其实就是判断参数个数是否符合要求，如果够了，就会立即执行函数。那么注意这里  如果参数够了，但是你的注入的参数超过需要的参数数量，则会报错。")]),n._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[n._v("func('a')('c')('b')('d')\n")])])]),t("p",[t("strong",[n._v("扩展：函数的length")]),n._v("\n在我们实现 currying 的过程中，我们用到了 fn.length 有的小伙伴就会说了 函数的 length 是我们传入所有参数的 length 吗， 其实并不是这样的\n函数的 length 属性获取的确实是参数的个数，但是并不是入参的个数，而是定义函数时的形参个数，但是形参的个数不包括剩余参数的个数，且仅包括第一个具有默认值之前的参数个数")]),n._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[n._v("console.log((function (a, b, c) { }).length); // 3\nconsole.log((function (a, b, c = 2) { }).length); // 2\nconsole.log((function (a, b = 2, c) { }).length); // 1\nconsole.log((function (a = 2, b, c) { }).length); // 0\nfunction test(...args) { console.log(args.length); }\ntest(1, 2, 3)  // 3\n")])])]),t("p",[n._v("所以在"),t("strong",[n._v("柯里化函数中，不建议使用 ES6 的参数默认值")])]),n._v(" "),t("h3",{attrs:{id:"array-原型方法"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#array-原型方法"}},[n._v("#")]),n._v(" Array 原型方法")]),n._v(" "),t("p",[n._v("下面给大家整理一些 Array 上常用的数组方法的实现。\n"),t("strong",[n._v("1、Array.prototype.map：")]),n._v("\n完整的结构是 Array.prototype.map(callback,this_args), map 函数接收两个参数，一个是必须的回调函数，另一个是在执行 callback 函数时的 this 的值\nmap 方法的主要功能是把原数组中每个元素按顺序执行一次 callback 函数，并且把所有返回的结果组合成一个新的数组，map 的返回值就是这个数组")]),n._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[n._v("Array.prototype.newMap = function (callback, this_args) {\n  // 异常处理\n  if (this == null) {\n    throw new TypeError('Cannot read property \"map\" of null or undefined');\n  }\n  let O = Object(this); // 1、转成数组对象，有 length 属性和 k-v 键值对\n  let len = O.length >>> 0; // 2、无符号右移 0 位，左侧填 0 补充，结果非负\n  // 3、判断 callback 是否为函数\n  if (typeof callback !== 'function') {\n    throw new TypeError(callback + ' is not a function');\n  }\n\n  let T = this_args; // 4、保存传入的 this\n  let A = new Array(len); // 5、创建一个新数组 长度为 len 默认为 空\n  let k = 0; // 6、 变量 k 为遍历索引\n  while (k < len) {\n    // 7、检查 k ： 是否在 O 及 O 的原型链上包含属性 k\n    if (k in O) {\n      let val = O[k]; // 8、获取遍历项 item\n      let mapedVal = callback.call(T, val, k, O); // 9、执行函数 callback 并传入参数 遍历项 、索引、数组本身\n      A[k] = mapedVal; // 10、取得返回值 并对新数组赋值\n    }\n    k++;\n  }\n  return A;\n}\n\n\nlet arr = [1, 2, 3]\nlet brr = arr.newMap((item, index) => {\n  return item * 2\n})\n\nconsole.log(brr);\n")])])]),t("p",[n._v("map 实现的核心在于不会关注我们回调函数的逻辑，而是通过遍历执行回调函数（传入 遍历项、索引、数组本身）拿到返回结果并赋值给新数组。\n只有 O 及其原型链上包含属性 k 时才会执行 callback 函数，所以对于稀疏数组 empty 元素 或者使用 delete 删除后的索引则不会调用。")]),n._v(" "),t("p",[t("strong",[n._v("Array.prototype.reduce")]),t("br"),n._v("\nreduce 的作用就是 将数据处理为单个返回值，如同河流汇聚，变为大海。 reduce 的完整结构是 Array.prototype.reduce(callback,initialVal), 在这里第二个参数就不是 this 了，而是初始值 initialVal，关于初始值，我们在使用的时候介绍过。")]),n._v(" "),t("ul",[t("li",[n._v("如果我们没有初始的 initialVal，那么第一次调用 callback 函数时，prev 使用原数组的第一个元素，那么 item 就是数组中的第二个元素")]),n._v(" "),t("li",[n._v("如果设置了初始值 initialVal，那么首次运行时第一次 prev 的值是 initialVal ，item 是数组中的第一个元素。")]),n._v(" "),t("li",[n._v("如果没有设置初始值并且数组为空 那么 reduce 将报错。\n接下来我们来模拟实现一个reduce：")])]),n._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[n._v("Array.prototype.myReduce = function (callback, initialVal) {\n  if (this == null) {\n    throw new TypeError('')\n  }\n  let O = Object(this);\n  let len = this.length >>> 0;\n\n  if (typeof callback !== 'function') {\n    throw new TypeError(callback + ' is not a function')\n  }\n  if (initialVal && len == 0) {\n    throw new TypeError('error')\n  }\n\n\n  let k = 0;\n  let accumulator = null;\n  if (initialVal) {\n    accumulator = initialVal;\n  } else {\n    let kpresent = false\n    while (!kpresent && k < len) {\n      kpresent = k in O\n      if (kpresent) {\n        accumulator = O[k]\n      }\n      k++;\n    }\n  }\n\n  while (k < len) {\n    if (k in O) {\n      let keyVal = O[k];\n      let ret = callback(accumulator, keyVal, k, O);\n      accumulator = ret\n    }\n    k++;\n  }\n\n  return accumulator;\n}\n")])])]),t("p",[n._v("大部分逻辑和 map 都是差不多的哈，只不过 map 返回的是数组，而 reduce 返回的是 accumulator 是 经由 reduce 处理之后的单个结果。\n这里来说一下这部分代码，如下：")]),n._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[n._v("  let k = 0;\n  let accumulator = null;\n  if (initialVal) {\n    accumulator = initialVal;\n  } else {\n    let kpresent = false\n    while (!kpresent && k < len) {\n      kpresent = k in O\n      if (kpresent) {\n        accumulator = O[k]\n      }\n      k++;\n    }\n  }\n")])])]),t("p",[n._v("首先还是定义循环变量 k ，紧接着定义了一个 accumulator 变量，这个是我们要返回的结果，继续往下  我们曾经说过有无初始值 initialVal 的两种情况，当 initialVal 不存在的时候会先定义一个标记值，\n如果这个标记值为 false 的时候会从0开始遍历 判断 k 值 是否是 O 及 O 的原型链上的属性，是的话就将 O[k] 的值赋值给 accumulator ，然后 k + 1")]),n._v(" "),t("p",[t("strong",[n._v("Array.prototype.forEach")]),n._v("\nforEach 方法和 map 极其相似，只不过 map 是有返回值的，但是 forEach 是没有返回值的")]),n._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[n._v("Array.prototype.myForEach = function (callback, this_args) {\n  if (this == null) {\n    throw new TypeError('Cannot read property \"forEach\" of null or undefined');\n  }\n  if (typeof callback !== 'function') {\n    throw new TypeError(callback + ' is not a function')\n  }\n  let O = Object(this);\n  let len = this.length >>> 0;\n  let _this = this_args;\n\n  let k = 0;\n  while (k < len) {\n    if (k in O) {\n      let kVal = O[k];\n      callback.call(_this, kVal, k, O);\n    }\n    k++;\n  }\n}\n\nlet arr = [1, 2, 3, 4, 5, 6]\nlet brr = [];\narr.myForEach(function (item, index) {\n  this[index] = item * index\n}, brr)\nconsole.log(brr);\n")])])])])}),[],!1,null,null,null);a.default=r.exports}}]);