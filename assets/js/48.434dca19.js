(window.webpackJsonp=window.webpackJsonp||[]).push([[48],{637:function(n,e,t){"use strict";t.r(e);var a=t(7),r=Object(a.a)({},(function(){var n=this,e=n.$createElement,t=n._self._c||e;return t("ContentSlotsDistributor",{attrs:{"slot-key":n.$parent.slotKey}},[t("h3",{attrs:{id:"new-运算符"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#new-运算符"}},[n._v("#")]),n._v(" new 运算符")]),n._v(" "),t("p",[n._v("接下来我们用new 操作符来创建一个 Person 实例")]),n._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[n._v("function Person(name, age) {\n    this.name = name;\n    this.age = age;\n}\n\nPerson.prototype.sayName = function () {\n    return this.name + ' --\x3e ' + this.age + ' years old';\n}\n\nvar p = new Person('zhang san', 18);\n\nconsole.log(p.sayName());\n")])])]),t("p",[n._v("我们可以看出 new 创建出来的实例有两个特性：")]),n._v(" "),t("ul",[t("li",[n._v("可以访问构造函数中的属性")]),n._v(" "),t("li",[n._v("可以范文原型中的属性")])]),n._v(" "),t("hr"),n._v(" "),t("p",[t("strong",[n._v("模拟实现")]),n._v("\n实现前要先分析\n假设 我们现在运行 new Person")]),n._v(" "),t("ul",[t("li",[n._v("首先会创建一个新对象")]),n._v(" "),t("li",[n._v("新对象的原型指向 Person.prototype")]),n._v(" "),t("li",[n._v("将函数的this 绑定为 新对象 为新对象添加属性")]),n._v(" "),t("li",[n._v("返回新对象（构造函数如果有返回值就返回构造函数的值）。")])]),n._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[n._v("// 模拟 new \nfunction Person(name, age) {\n    this.name = name;\n    this.age = age;\n}\n\nPerson.prototype.sayName = function () {\n    return this.name + ' --\x3e ' + this.age + ' years old';\n}\n\n// 模拟 new \nfunction NEW() {\n    var obj = new Object()\n    arguments = Array.prototype.slice.call(arguments)\n    var fun = arguments.shift(0);\n    obj.__proto__ = fun.prototype\n    var ret = fun.apply(obj, arguments)\n    return ret instanceof Object ? ret : obj\n}\n\n// var p = new Person('zhang san', 18);\nvar p = NEW(Person, 'zhangsan', 19)\n\nconsole.log(p);\n")])])]),t("hr"),n._v(" "),t("h3",{attrs:{id:"深浅拷贝原理"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#深浅拷贝原理"}},[n._v("#")]),n._v(" 深浅拷贝原理")]),n._v(" "),t("p",[n._v("为什么会出现深浅拷贝？\n原因是因为我们知道基本数据赋值是直接赋值，修改之后互不影响，但是如果是引用类型的数据，我们赋值本质上是这个值的地址，如果其中一个改变，那么这个地址中的值就改变了，所有的值都会更新。\n于是 深浅拷贝 应运而生。\n那么浅拷贝和深拷贝又要怎么区分呢？\n首先你要知道什么是拷贝：\n就是创建了一个新对象，对象中是原对象的精确拷贝，如果是基本类型就复制基本类型，如果属性是引用类型就复制引用类型，拷贝的是引用数据的内存地址。\n浅拷贝呢就相当于只解决了第一层的问题，后面还是会出现。深拷贝就相当于完美解决了这个问题。\n"),t("strong",[n._v("浅拷贝使用场景")]),n._v("\n1、Object.assign()\nObject.assign作用是将所有可枚举属性的值从一个或多个元对象中复制到目标对象，然后返回这个目标对象。 （这是个浅拷贝）")]),n._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[n._v("var a = {\n    name: 'zhang san',\n    book: {\n        'nature': 'peoples of nature',\n        'technology': 'Bill Gates'\n    }\n}\n\n\nvar a_a = Object.assign({}, a)\nconsole.log(a, a_a);\na.name = 'li si'\nconsole.log(a, a_a);\na.book.nature = 'lots of moneys'\nconsole.log(a, a_a);\n\n")])])]),t("p",[n._v("我们来分析一下上面的行为 首先创建了一个对象 a a中 有两个属性分别是基本数据和引用数据 ，现在又创建了一个对象a_a 来接受Object.assign合并后的值 目标对象是 ‘{}’\n当我们修改a中的基本数据时，发现这个浅拷贝是好用的 两个对象互不影响，可是 当我们修改引用类型的时候 我们发现所有的值都变了。")]),n._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[n._v("let a = {\n    name: 'zhangsan',\n    age: '19',\n    like: null,\n    id: Symbol('zhangsan'),\n    next: undefined\n}\n\nlet b = Object.assign({}, a)\n\nconsole.log(a,b);\n")])])]),t("p",[n._v("String 类型 和 Symbol 类型的属性都会被拷贝，而且不会跳过那些值为null 或 undefined 的源对象。\n"),t("strong",[n._v("Object.assign 的模拟实现")]),t("br"),n._v("\n首先我们看下Object.assign的特征：")]),n._v(" "),t("ul",[t("li",[n._v("1、判断原生 Object 是否支持该函数，如果不存在的话创建一个函数 assign，并使用 Object.defineProperty 将该函数绑定到 Object 上。")]),n._v(" "),t("li",[n._v("2、判断参数是否正确 目标对象不能为空，可以为空对象但是不能不设置值。")]),n._v(" "),t("li",[n._v("3、使用Object（）转成对象，并保存为 to ，最后返回这个对象 to。")]),n._v(" "),t("li",[n._v("4、使用 for ··· in 循环遍历出所有可枚举的自由属性。并复制给新的目标对象（使用hasOwnProperty 获取自由属性，即非原型链上的属性）。\n代码实现：")])]),n._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[n._v("if (typeof Object.myAssign !== 'function') {\n    Object.defineProperty(Object, 'myAssign', {\n        value: function (target) {\n            if (target == null) {\n                throw new Error('Cannot Convert null to object')\n            }\n            var to = Object(target)\n\n            for (var i = 1; i < arguments.length; i++) {\n                var propSource = arguments[i]\n                if (propSource) {\n                    for (var prop in propSource) {\n                         if (Object.prototype.hasOwnProperty.call(propSource, prop)) {\n                             to[prop] = propSource[prop]\n                         }\n                    }\n                }\n            }\n\n            return to\n        },\n        writable: true,\n        configurable: true\n    })\n}\n\nvar b = Object.myAssign({}, { name: 'zhangsan' }, { age: 18 });\nconsole.log(b);\n\n注意：\n1、可枚举性\n原生情况下挂载在Object上的属性是不可枚举的，但是直接在Object上挂载属性是可枚举的，所以这里必须使用Object.defineProperty,并设置enumerable:false,writable:true,configurable:true.\nfor (var key in Object) {\n    console.log(key);\n}\nconsole.log(Object.keys(Object));\n我们也可以使用Object.getOwnPropertyDescriptor 或者Object.propertyIsEnumerable 来查看Object.assign 是否可枚举\nconsole.log(Object.getOwnPropertyDescriptor(Object, 'assign')); // 可以看到defineProperty的配置对象\n {\n        writable: true, // 可写\n        enumerable: false, // 可枚举\n        configurable: true, // 可配置\n        value: ƒ\n    }\n2、判断参数是否正确\n有些文章判断参数是否正确是这样判断的\nif(target === undefined || target === null){\n    throw new TypeError('Cannot convert undefined or null to object!')\n}\n这样写就没有必要了，因为 undefined 和 null 是相等的 即 undefined == null 为 true，\n所以我们只需要判断 我们的目标对象 是否等于 null 即可。\n")])])]),t("p",[n._v("2、ES6 展开操作符 （浅拷贝）\n3、Array.prototype.slice() （浅拷贝）\nslice 方法返回一个新的数组对象，这一对象是一个由begin 和 end（不包括end）决定的原数组的浅拷贝，原始数组不会改变")]),n._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[n._v("let arr = [1, '2', 3, [4, 5]]\n\nlet brr = arr.slice(0, arr.length)\narr[0] = 10\narr[3][0] = 2\nconsole.log(brr);\n")])])]),t("p",[n._v("我们发现改变 arr[0]的值 brr 中的值没有改变 但是改变 arr[3][0]的值后 brr[3][0]的值也跟着改变 说明 slice 方法是浅拷贝。 "),t("strong",[n._v("相应的还有 concat")])]),n._v(" "),t("p",[t("strong",[n._v("深拷贝")]),n._v("\n深拷贝会拷贝所有的属性，并且拷贝属性指向的内存，就相当于把源对象及对象中所有的属性（基本数据，引用数据）全部拷贝即为深拷贝。\n深拷贝相比于浅拷贝速度慢，花销大 看情况使用。")]),n._v(" "),t("p",[t("strong",[n._v("深拷贝使用场景")]),n._v("\n1、JSON.parse(JSON.stringify(Object))")]),n._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[n._v("var a = {\n    name: 'zhangsan',\n    age: 19,\n    books: {\n        nature: 'people of nature',\n        technology: 'Bill Gates'\n    }\n};\n\nvar b = JSON.parse(JSON.stringify(a));\n\nconsole.log(a, b);\na.name = 'li si';\nconsole.log(a, b);\nb.books.nature = 'Man And Nature';\nconsole.log(a, b);\n")])])]),t("p",[n._v("发现改变不同的数据 两个对象之间互不影响。\n再试试对数组的深拷贝")]),n._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[n._v("var a = [1, 2, 3, [4, 5]]\n\nvar b = JSON.parse(JSON.stringify(a))\n\nconsole.log(a, b);\na[0] = 10\nconsole.log(a, b);\nb[3][1] = 0\nconsole.log(a, b);\n")])])]),t("p",[n._v("对数组深拷贝之后，改变原数组不会影响到拷贝之后的数组。\n但是使用JSON API 实现深拷贝是有弊端的")]),n._v(" "),t("ul",[t("li",[n._v("1、如果obj中存在时间对象，深拷贝后时间是字符串形式，而不是对象的形式")]),n._v(" "),t("li",[n._v("2、如果obj中有RegExp，则打印出来是空对象")]),n._v(" "),t("li",[n._v("3、如果obj中有函数或者undefined，则会直接被丢弃")]),n._v(" "),t("li",[n._v("4、如果对象是由构造函数生成，则会丢掉对象的constructor")]),n._v(" "),t("li",[n._v("5、如果对象中存在循环引用的情况，无法正确实现深拷贝")]),n._v(" "),t("li",[n._v("6、如果对象中存在NaN，则序列化后会变成null\n下面我们来看下这些问题：")])]),n._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[n._v("// 1、如果obj中存在时间对象，深拷贝后时间是字符串形式，而不是对象的形式\nvar obj = {\n    time: new Date()\n}\n\nvar a = JSON.parse(JSON.stringify(obj))\n\nconsole.log(obj, typeof obj.time, a, typeof a.time); \n// {time: Wed Feb 09 2022 14:56:13 GMT+0800 (中国标准时间)}time: Wed Feb 09 2022 14:56:13 GMT+0800 (中国标准时间) {}__proto__: Object \"object\"\n/* {time: \"2022-02-09T06:56:13.002Z\"} \"string\"\ntime: \"2022-02-09T06:56:13.002Z\"\n__proto__: Object\n*/\n/*\n    我们发现深拷贝之后的数据变成了字符串，这个如何解决呢？ 我们把日期对象转为时间戳\n*/\nvar obj = {\n    time: (new Date()).valueOf()\n}\n\nvar a = JSON.parse(JSON.stringify(obj))\n\nconsole.log(obj, typeof obj.time, a, typeof a.time);\n/*现在我们转换后的数据是不是就一致了*/\n\n// -------------------------------------------------\n// 2、如果obj中有RegExp，则打印出来是空对象\nvar obj = {\n    reg: new RegExp(/\\/\\.{1,10}/)\n}\n\nvar a = JSON.parse(JSON.stringify(obj))\n\nconsole.log(obj, a);\n// 我们发现经过深拷贝之后 a 变为了 空对象。\n// -------------------------------------------------\n// 3、如果obj中有函数、Symbol 或者 undefined，则会直接被丢弃\nvar obj = {\n    a: function () { },\n    b: undefined,\n    c: Symbol('hello')\n}\n\nvar a = JSON.parse(JSON.stringify(obj))\n\nconsole.log(obj, a);\n\n// -------------------------------------------------\n// 4、如果对象是由构造函数生成，则会丢掉对象的constructor\nfunction Person(name, age) {\n    this.name = name;\n    this.age = age;\n}\n\nlet p = new Person('zhangsan', 19)\n\nvar obj = {\n    person: p\n}\n\n\nlet b = JSON.parse(JSON.stringify(p))\n\nconsole.log(obj, b);\nconsole.log(p instanceof Person, b instanceof Person);\n// 发现此时经过深拷贝后的对象原型已经不再指向我们的构造函数\n// -------------------------------------------------\n// 5、如果对象中存在循环引用的情况，无法正确实现深拷贝\nvar a = {\n    name: 'zhangsan'\n}\n\na.a = a;\n\nconsole.log(a);\n\nvar b = JSON.parse(JSON.stringify(a))\nconsole.log(a, b);\n/*\n    Uncaught TypeError: Converting circular structure to JSON\n    --\x3e starting at object with constructor 'Object'\n    --- property 'a' closes the circle\n    at JSON.stringify (<anonymous>)\n*/\n// -------------------------------------------------\n\n// 6、如果对象中存在NaN，则序列化后会变成null\nvar a = {\n    num:NaN\n}\n\n\nvar b = JSON.parse(JSON.stringify(a))\nconsole.log(a, b);\n\n// -------------------------------------------------\n\n")])])]),t("p",[t("strong",[n._v("浅拷贝的实现：")])]),n._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[n._v("var shallowCopy = function (target) {\n    var to = new Object();\n    for (var prop in target) {\n        if (Object.prototype.hasOwnProperty.call(target, prop)) {\n            to[prop] = target[prop];\n        }\n    }\n    return to\n}\n\n\nvar a = {\n    name: 'zhang san',\n    age: 18,\n    book: {\n        title: 'Man And Nature',\n        price: 100\n    }\n}\n\nvar b = shallowCopy(a)\nconsole.log(b);\na.name = 'li si';\nconsole.log(b);\na.book.title = 'People of Nature';\nconsole.log(b);\n")])])]),t("p",[t("strong",[n._v("实现深拷贝：")])]),n._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[n._v("Object.defineProperty(Object, 'cloneDeep', {\n    value: function (target) {\n        var source = {};\n        for (var prop in target) {\n            if (Object.prototype.hasOwnProperty.call(target, prop)) {\n                if (typeof target[prop] == 'object') {\n                    source[prop] = Object.cloneDeep(target[prop])\n                } else {\n                    source[prop] = target[prop]\n                }\n            }\n        }\n        return source;\n    },\n    writable: false,\n    configurable: true\n})\n\nvar a = {\n    name: 'zhang san',\n    age: 18,\n    book: {\n        title: 'Man And Nature',\n        price: 19\n    }\n}\n\nvar b = Object.cloneDeep(a)\na.book.title = 'People of Nature';\nconsole.log(a, b);\n")])])]),t("p",[n._v("测试通过 这样就完成了一个简单的深拷贝， 但是这样的深拷贝会存在一些问题")]),n._v(" "),t("ul",[t("li",[n._v("没有正确的判断入参的类型 和 返回参数的类型 比如 如果参数为null 返回的 却是一个空对象。")]),n._v(" "),t("li",[n._v("不能兼容数组")]),n._v(" "),t("li",[n._v("重复引用问题\n接下来我们依次完善我们的深拷贝\n首先我们解决参数类型的问题")])]),n._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[n._v("/*\n    之前我们通过一些方式来判断参数是否为数组，同样我们可以用这种方式来判断我们的参数是否是 对象\n*/\nObject.prototype.isObj = function (target) {\n    return Object.prototype.toString.call(target) == '[object Object]';\n}\n// 修改我们 deepClone 的代码\nObject.prototype.isObj = function (target) {\n    return Object.prototype.toString.call(target) == '[object Object]';\n}\nObject.defineProperty(Object, 'cloneDeep', {\n    value: function (target) {\n        if (!Object.isObj(target)) return target // 判断是否是对象 如果不是则返回此类型\n        var source = {};\n        for (var prop in target) {\n            if (Object.prototype.hasOwnProperty.call(target, prop)) {\n                if (Object.isObj(target[prop])) {\n                    source[prop] = Object.cloneDeep(target[prop])\n                } else {\n                    source[prop] = target[prop]\n                }\n            }\n        }\n        return source;\n    },\n    writable: false,\n    configurable: true\n})\n\nvar a = {\n    name: 'zhang san',\n    age: 18,\n    book: {\n        title: 'Man And Nature',\n        price: 19\n    }\n}\n\na = null\n\nvar b = Object.cloneDeep(a)\n// a.book.title = 'People of Nature';\nconsole.log(a, b);\n\n/*测试正常 不是对象类型的都会返回对应值*/\n/*\n    我们来看下一个兼容数组，我们想一下如果要兼容数组的话 我们用来判断对象的方式，是不是就不妥当了，因为如果是数组的话 返回的应该是[object Array] \n    所以我们这里判断类型还是要使用 typeof 但是如果使用typeof的话要注意一些小细节\n    typeof null // object\n    typeof {} // object\n    typeof [] // object\n */\nObject.prototype.isObj = function (target) {\n    return target && typeof target === 'object';\n}\nArray.prototype.isArray = function (target) {\n    return Object.prototype.toString.call(target) === '[object Array]'\n}\nObject.defineProperty(Object, 'cloneDeep', {\n    value: function (target) {\n        if (!Object.isObj(target)) return target // 判断是否是对象 如果不是则返回此类型\n        var source = Array.isArray(target) ? [] : {}; // 兼容数组\n        for (var prop in target) {\n            if (Object.prototype.hasOwnProperty.call(target, prop)) {\n                if (Object.isObj(target[prop])) {\n                    source[prop] = Object.cloneDeep(target[prop])\n                } else {\n                    source[prop] = target[prop]\n                }\n            }\n        }\n        return source;\n    },\n    writable: false,\n    configurable: true\n})\n\n// 测试一下\nvar a = [1, 2, 3, [4, 5]]\nvar b = Object.cloneDeep(a)\na[3][1] = 10\nconsole.log(a, b);\n/* 测试正常，能够兼容数组 */\n/* 下一个问题，重复引用的问题，解决这个问题的本质是找到并返回重复引用的地方就可以了？ */\nObject.prototype.isObj = function (target) {\n    return target && typeof target === 'object';\n}\nArray.prototype.isArray = function (target) {\n    return Object.prototype.toString.call(target) === '[object Array]'\n}\n\nfunction findFlag(list, target) {\n    for (var i = 0; i < list.length; i++) {\n        if (list[i].target === target) {\n            return list[i];\n        }\n    }\n    return null;\n}\n\nObject.defineProperty(Object, 'cloneDeep', {\n    value: function (target, flagStack) {\n        if (!Object.isObj(target)) return target // 判断是否是对象 如果不是则返回此类型\n        if (!flagStack) flagStack = []; // 新增代码，初始化数组\n        var source = Array.isArray(target) ? [] : {}; // 兼容数组\n        var dta = findFlag(flagStack, target)\n\n        if (dta) return dta.source\n        flagStack.push({\n            source,\n            target\n        })\n        for (var prop in target) {\n            if (Object.prototype.hasOwnProperty.call(target, prop)) {\n                if (Object.isObj(target[prop])) {\n                    source[prop] = Object.cloneDeep(target[prop], flagStack)\n                } else {\n                    source[prop] = target[prop]\n                }\n            }\n        }\n        return source;\n    },\n    writable: false,\n    configurable: true\n})\n\n// 测试一下\n// var a = [1, 2, 3, [4, 5]]\n// var b = Object.cloneDeep(a)\n// a[3][1] = 10\n// console.log(a, b);\nvar a = {\n    s: 'obj'\n}\na.tina = a\nvar b = Object.cloneDeep(a)\nconsole.log(b);\n/*测试正常*/\n\n// 还有第二种方式就是使用哈希表，但是 WeakMap 是 ES6中的知识。\nObject.defineProperty(Object, 'cloneDeep', {\n    value: function (target, hashmap = new WeakMap()) {\n        if (!Object.isObj(target)) return target // 判断是否是对象 如果不是则返回此类型\n        if (hashmap.has(target)) return hashmap.get(target)\n        var source = Array.isArray(target) ? [] : {}; // 兼容数组\n        hashmap.set(target, source)\n        for (var prop in target) {\n            if (Object.prototype.hasOwnProperty.call(target, prop)) {\n                if (Object.isObj(target[prop])) {\n                    source[prop] = Object.cloneDeep(target[prop], hashmap)\n                } else {\n                    source[prop] = target[prop]\n                }\n            }\n        }\n        return source;\n    },\n    writable: false,\n    configurable: true\n})\n\n// 测试一下\n// var a = [1, 2, 3, [4, 5]]\n// var b = Object.cloneDeep(a)\n// a[3][1] = 10\n// console.log(a, b);\nvar a = {\n    s: 'obj'\n}\na.tina = a\nvar b = Object.cloneDeep(a)\nconsole.log(b);\n")])])]),t("p",[n._v("有的同学就会发现了 说 我们用的都是递归的方式，那么就会存在递归爆栈的问题\n爆栈 --》 RangeError: Maximum call stack size exceeded\n了解算法的同学可能会更好的了解 递归可以转化成while循环的方式。")]),n._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[n._v("Object.prototype.isObj = function (target) {\n    return target && typeof target === 'object';\n}\nArray.prototype.isArray = function (target) {\n    return Object.prototype.toString.call(target) === '[object Array]'\n}\n\nfunction findFlag(list, target) {\n    for (var i = 0; i < list.length; i++) {\n        if (list[i].target === target) {\n            return list[i];\n        }\n    }\n    return null;\n}\n\nObject.defineProperty(Object, 'cloneDeep', {\n    value: function (target) {\n\n        if (!Object.isObj(target)) return target // 判断是否是对象 如果不是则返回此类型\n        var source = Array.isArray(target) ? [] : {}; // 兼容数组   \n\n        const loopList = [\n            {\n                parent: source,\n                key: undefined,\n                data: target\n            }\n        ]\n\n        while (loopList.length) {\n            let node = loopList.pop();\n            let parent = node.parent;\n            let key = node.key;\n            let data = node.data;\n            let ret = parent;\n            if (key !== undefined) {\n                ret = parent[key] = Array.isArray(target) ? [] : {}\n            }\n\n            for (let prop in data) {\n                if (data.hasOwnProperty(prop)) {\n                    if (Object.isObj(data[prop])) {\n                        loopList.push({\n                            parent: ret,\n                            key: prop,\n                            data: data[prop]\n                        })\n                    } else {\n                        ret[prop] = data[prop]\n                    }\n                }\n            }\n\n        }\n        return source\n    },\n    writable: false,\n    configurable: true\n})\n\nvar a = {\n    name: 'zhang san',\n    age: 18,\n    book: {\n        title: 'Man And Nature',\n        price: 19\n    }\n}\n\nvar b = Object.cloneDeep(a)\nconsole.log(a, b);\na.book.title = 'People of Nature'\nconsole.log(a, b);\n")])])]),t("p",[t("strong",[n._v("Lodash 中的深拷贝是如何实现的：")]),n._v("  https://github.com/yygmind/blog/issues/31"),t("br"),n._v("\n整体流程\n入口文件是cloneDeep.js，直接调用核心文件baseClone.js的方法")]),n._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[n._v("const CLONE_DEEP_FLAG = 1;\nconst CLONE_SYMBOLS_FLAG = 4;\n\n/**\n * baseClone\n * @param { 需要拷贝的对象 } value \n * @param { 位掩码（Bitwise） }\n * @returns \n */\nfunction cloneDeep(value) {\n    return baseClone(value, CLONE_DEEP_FLAG | CLONE_SYMBOLS_FLAG)\n}\n")])])]),t("p",[t("strong",[n._v("baseClone 方法")]),n._v("\n先介绍该方法的参数 baseClone(value,bitmask,custoizer,key,object,stack)")]),n._v(" "),t("ul",[t("li",[n._v("value: 需要拷贝的对象")]),n._v(" "),t("li",[n._v("bitmask: 位掩码，其中1是深拷贝，2拷贝原型链上的属性，4是拷贝Symbols属性")]),n._v(" "),t("li",[n._v("customizer: 定制的clone函数")]),n._v(" "),t("li",[n._v("key: 传入value值的key")]),n._v(" "),t("li",[n._v("object: 传入value值的父对象")]),n._v(" "),t("li",[n._v("stack: Stack 栈， 用来处理循环引用")])]),n._v(" "),t("p",[n._v("完整代码：")]),n._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[n._v("function baseClone(value, bitmask, customizer, key, object, stack) {\n    let result\n\n    // 标志位\n    const isDeep = bitmask & CLONE_DEEP_FLAG\t\t// 深拷贝，true\n    const isFlat = bitmask & CLONE_FLAT_FLAG\t\t// 拷贝原型链，false\n    const isFull = bitmask & CLONE_SYMBOLS_FLAG\t// 拷贝 Symbol，true\n\n    // 自定义 clone 函数\n    if (customizer) {\n        result = object ? customizer(value, key, object, stack) : customizer(value)\n    }\n    if (result !== undefined) {\n        return result\n    }\n\n    // 非对象  \n    if (!isObject(value)) {\n        return value\n    }\n    \n    const isArr = Array.isArray(value)\n    const tag = getTag(value)\n    if (isArr) {\n        // 数组\n        result = initCloneArray(value)\n        if (!isDeep) {\n            return copyArray(value, result)\n        }\n    } else {\n        // 对象\n        const isFunc = typeof value == 'function'\n\n        if (isBuffer(value)) {\n            return cloneBuffer(value, isDeep)\n        }\n        if (tag == objectTag || tag == argsTag || (isFunc && !object)) {\n            result = (isFlat || isFunc) ? {} : initCloneObject(value)\n            if (!isDeep) {\n                return isFlat\n                    ? copySymbolsIn(value, copyObject(value, keysIn(value), result))\n                \t: copySymbols(value, Object.assign(result, value))\n            }\n        } else {\n            if (isFunc || !cloneableTags[tag]) {\n                return object ? value : {}\n            }\n            result = initCloneByTag(value, tag, isDeep)\n        }\n    }\n    // 循环引用\n    stack || (stack = new Stack)\n    const stacked = stack.get(value)\n    if (stacked) {\n        return stacked\n    }\n    stack.set(value, result)\n\n    // Map\n    if (tag == mapTag) {\n        value.forEach((subValue, key) => {\n            result.set(key, baseClone(subValue, bitmask, customizer, key, value, stack))\n        })\n        return result\n    }\n\n    // Set\n    if (tag == setTag) {\n        value.forEach((subValue) => {\n            result.add(baseClone(subValue, bitmask, customizer, subValue, value, stack))\n        })\n        return result\n    }\n\n    // TypedArray\n    if (isTypedArray(value)) {\n        return result\n    }\n\n    // Symbol & 原型链\n    const keysFunc = isFull\n    \t? (isFlat ? getAllKeysIn : getAllKeys)\n    \t: (isFlat ? keysIn : keys)\n\n    const props = isArr ? undefined : keysFunc(value)\n    \n    // 遍历赋值\n    arrayEach(props || value, (subValue, key) => {\n        if (props) {\n            key = subValue\n            subValue = value[key]\n        }\n        assignValue(result, key, baseClone(subValue, bitmask, customizer, key, value, stack))\n    })\n    \n    // 返回结果\n    return result\n}\n")])])]),t("p",[n._v("我们将源码分为了下面几个部分来阅读")]),n._v(" "),t("ul",[t("li",[n._v("位掩码")]),n._v(" "),t("li",[n._v("定制 clone 函数")]),n._v(" "),t("li",[n._v("非对象")]),n._v(" "),t("li",[n._v("数组 & 正则")]),n._v(" "),t("li",[n._v("对象 & 函数")]),n._v(" "),t("li",[n._v("循环引用")]),n._v(" "),t("li",[n._v("Map & Set")]),n._v(" "),t("li",[n._v("Symbol & 原型链")])]),n._v(" "),t("h4",{attrs:{id:"位掩码"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#位掩码"}},[n._v("#")]),n._v(" 位掩码")]),n._v(" "),t("p",[n._v("位掩码参数定义如下")]),n._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[n._v("const CLONE_DEEP_FLAG = 1   // 1 即 0001，深拷贝标志位\nconst CLONE_FLAT_FLAG = 2   // 2 即 0010，拷贝原型链标志位\nconst CLONE_SYMBOLS_FLAG = 4    // 4 即 0100，拷贝 Symbols 标志位\n")])])]),t("p",[n._v("位掩码用于处理同时存在多个布尔选项的情况，其中"),t("strong",[n._v("掩码中的每个选项的值都等于 2 的幂。")]),n._v(" 相比直接使用变量来说，优点是可以节省没存")]),n._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[n._v(" // cloneDeep 添加标志位，1|4 即 0001 | 0100 即 0101 即 5\n CLONE_DEEP_FLAG | CLONE_SYMBOLS_FLAG\n \n let result;\n const isDeep = bitmask & CLONE_DEEP_FLAG   // 5 & 1 即 1 true\n const isFlat = bitmask & CLONE_FLAT_FLAG   // 5 & 2 即 0 false\n const isFull = bitmask & CLONE_SYMBOLS_FLAG    // 5 & 4 即 4 true\n")])])]),t("p",[n._v("常用的基本操作如下：")]),n._v(" "),t("ul",[t("li",[n._v("a | b: 添加标志位 a 和 b")]),n._v(" "),t("li",[n._v("mask & a: 去除标志位 a")]),n._v(" "),t("li",[n._v("mask & ~a: 清除标志位 a")]),n._v(" "),t("li",[n._v("mask ^ a: 取出与 a 的不同部分")])]),n._v(" "),t("h4",{attrs:{id:"定制-clone-函数"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#定制-clone-函数"}},[n._v("#")]),n._v(" 定制 clone 函数")]),n._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[n._v("if (customizer) {\n\tresult = object ? customizer(value, key, object, stack) : customizer(value)\n}\nif (result !== undefined) {\n    return result\n}\n")])])]),t("p",[n._v("上面代码是当存在 customizer 的情况时 如果 存在 value 值的父对象，就传入 value，key，object，stack 这几个参数，如果不存在 value 的父对象 object 则只传入 value 执行定制函数。\n函数的返回值 result 不为空则返回执行结果。")]),n._v(" "),t("h4",{attrs:{id:"非对象"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#非对象"}},[n._v("#")]),n._v(" 非对象")]),n._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[n._v("if (!isObject(value)) {\n    return value;\n}\n\n// ../isObject.js\nfunction isObject(value) {\n    const type = typeof value;\n    return value != null && (type == 'object' || type ='function');\n}\n")])])]),t("p",[n._v("这里判断 value 是否为对象，如果不是则直接返回这个值，用来判断对象的方法和我们的相差不大，只不过他这里多了一个 function 类型")])])}),[],!1,null,null,null);e.default=r.exports}}]);