(window.webpackJsonp=window.webpackJsonp||[]).push([[74],{663:function(e,t,r){"use strict";r.r(t);var a=r(10),l=Object(a.a)({},(function(){var e=this,t=e.$createElement,r=e._self._c||t;return r("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[r("h2",{attrs:{id:"reflect"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#reflect"}},[e._v("#")]),e._v(" Reflect")]),e._v(" "),r("p",[e._v("反射")]),e._v(" "),r("p",[e._v("Reflect 是什么？")]),e._v(" "),r("p",[e._v("Reflect 是一个内置的 JS 对象，它提供了一系列方法，可以让开发者通过调用这些方法，访问一些 JS 底层功能。")]),e._v(" "),r("p",[e._v("使用 Reflect 可以实现如果：属性的赋值与取值、调用普通函数、调用构造函数、判断属性是否存在于对象中··· 等等功能")]),e._v(" "),r("p",[e._v("ES6深度贯彻"),r("strong",[e._v("减少魔法、让代码更纯粹")]),e._v("。所以将这些底层功能抽离出来再由 Reflect 来映射这些功能。")]),e._v(" "),r("h3",{attrs:{id:"es5中常见的-api"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#es5中常见的-api"}},[e._v("#")]),e._v(" ES5中常见的 API")]),e._v(" "),r("ul",[r("li",[e._v("Reflect.set(target,key,value) : 为target对象的 key 属性 赋值为 value，为对象的属性赋值。 obj.key = value;")]),e._v(" "),r("li",[e._v("Reflect.get(target,key) :    读取对象 target 的属性 key ，读取对象属性值 obj.key")]),e._v(" "),r("li",[e._v("Reflect.apply(target,thisArgument,argumentsList) :   调用一个指定的函数，并绑定 this 和 参数列表，等同于函数调用。 function.apply(this,arguments)")]),e._v(" "),r("li",[e._v("Reflect.deleteProperty(target,key):  删除一个对象的属性   delete  obj.key")]),e._v(" "),r("li",[e._v("Reflect.defineProperty(target,key,attributes):  类似于 Obect.defineProperty ，不同的是如果配置出现问题，返回false 而不是报错。")]),e._v(" "),r("li",[e._v("Reflect.construct(target,argumentsList):  用构造函数的方式创建一个对象  new Function()")]),e._v(" "),r("li",[e._v("Reflect.has(target,key) :  判断一个对象是否拥有一个属性。   key in obj")])])])}),[],!1,null,null,null);t.default=l.exports}}]);