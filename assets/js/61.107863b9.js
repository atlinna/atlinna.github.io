(window.webpackJsonp=window.webpackJsonp||[]).push([[61],{650:function(t,a,s){"use strict";s.r(a);var r=s(10),e=Object(r.a)({},(function(){var t=this,a=t.$createElement,s=t._self._c||a;return s("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[s("h2",{attrs:{id:"迭代器"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#迭代器"}},[t._v("#")]),t._v(" 迭代器")]),t._v(" "),s("h3",{attrs:{id:"什么是迭代"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#什么是迭代"}},[t._v("#")]),t._v(" 什么是迭代")]),t._v(" "),s("p",[t._v("从一个数据集合中按照一定的顺序，不断取出数据的过程。")]),t._v(" "),s("h3",{attrs:{id:"迭代和遍历的区别"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#迭代和遍历的区别"}},[t._v("#")]),t._v(" 迭代和遍历的区别")]),t._v(" "),s("p",[t._v("迭代强调的是依次取数据，并不保证取多少，也不保证把所有的数据取完。\n遍历强调的是把整个数据依次全部取出。")]),t._v(" "),s("p",[t._v("比如有一个数组 "),s("code",[t._v("arr=[1,2,3,4,5,6]")]),t._v("\n遍历就是将数组arr的数据"),s("strong",[t._v("按照顺序从头到尾依次取一遍")]),t._v("\n迭代是从数组arr里面"),s("strong",[t._v("先取一个出来，然后我不知道要不要继续取下一个，也不知道这个数组到底有多大，针对的只是当前这一项，并不知道后面的情况。")])]),t._v(" "),s("h3",{attrs:{id:"迭代器-2"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#迭代器-2"}},[t._v("#")]),t._v(" 迭代器")]),t._v(" "),s("p",[t._v("对迭代过程的封装，再不同的语言中有不通的表现形式。通常为对象。")]),t._v(" "),s("p",[t._v("就是帮我们取数的工具。")]),t._v(" "),s("h3",{attrs:{id:"迭代模式"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#迭代模式"}},[t._v("#")]),t._v(" 迭代模式")]),t._v(" "),s("p",[t._v("一种设计模式，用来统一迭代过程，并规范了迭代器的规格：")]),t._v(" "),s("ul",[s("li",[t._v("迭代器应该具有得到下一个数据的能力。")]),t._v(" "),s("li",[t._v("迭代器应该具有判断是否还有后续数据的能力。")])]),t._v(" "),s("h3",{attrs:{id:"js中的迭代器"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#js中的迭代器"}},[t._v("#")]),t._v(" JS中的迭代器")]),t._v(" "),s("p",[t._v("如果一个对象具有"),s("code",[t._v("next")]),t._v("方法，并且该方法返回一个对象，对象的格式如下")]),t._v(" "),s("div",{staticClass:"language-js extra-class"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),s("span",{pre:!0,attrs:{class:"token literal-property property"}},[t._v("value")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"any-值"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),s("span",{pre:!0,attrs:{class:"token literal-property property"}},[t._v("done")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Boolean-是否迭代完成"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),s("p",[t._v("则认为该对象是一个迭代器。")]),t._v(" "),s("p",[t._v("含义：")]),t._v(" "),s("ul",[s("li",[t._v("next方法：用于得到下一个数据")]),t._v(" "),s("li",[t._v("返回的对象：\n"),s("ul",[s("li",[t._v("value:Any 下一个数据的值")]),t._v(" "),s("li",[t._v("done:Boolean 是否完成迭代")])])])])])}),[],!1,null,null,null);a.default=e.exports}}]);