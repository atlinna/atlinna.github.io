(window.webpackJsonp=window.webpackJsonp||[]).push([[141],{728:function(a,t,e){"use strict";e.r(t);var n=e(10),r=Object(n.a)({},(function(){var a=this,t=a.$createElement,e=a._self._c||t;return e("ContentSlotsDistributor",{attrs:{"slot-key":a.$parent.slotKey}},[e("h3",{attrs:{id:"约束方式"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#约束方式"}},[a._v("#")]),a._v(" 约束方式")]),a._v(" "),e("ol",[e("li",[e("p",[a._v("字符串类型")]),a._v(" "),e("p",[e("code",[a._v("let str: String = 'abcdef'")])])]),a._v(" "),e("li",[e("p",[a._v("数字类型")]),a._v(" "),e("p",[e("code",[a._v("let num: Number = 123;")])])]),a._v(" "),e("li",[e("p",[a._v("布尔类型")]),a._v(" "),e("p",[e("code",[a._v("let flag: Boolean = true;")])])]),a._v(" "),e("li",[e("p",[a._v("数组")]),a._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v("let arr: Array<number> = [1, 2, 3];\nlet brr: number[] = [1, 2, 3];\n")])])])]),a._v(" "),e("li",[e("p",[a._v("对象")]),a._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v("let obj: object = {} // 可以使用这种方式约束但是不够精准。因为对象中存在其他属性\n")])])])]),a._v(" "),e("li",[e("p",[a._v("null 和 undefined")]),a._v(" "),e("p",[a._v("null 和 undefined 是其他类型的子类型")])])]),a._v(" "),e("h3",{attrs:{id:"联合类型"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#联合类型"}},[a._v("#")]),a._v(" 联合类型")]),a._v(" "),e("p",[a._v("多种类型选择其中一个")]),a._v(" "),e("p",[a._v("配合类型保护进行判断")]),a._v(" "),e("p",[a._v("类型保护：当一个类型进行类型判断后，在判断语句中可以确定变量的类型。")]),a._v(" "),e("h3",{attrs:{id:"void-类型"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#void-类型"}},[a._v("#")]),a._v(" void 类型")]),a._v(" "),e("p",[a._v("表示一个函数不返回任何东西。")]),a._v(" "),e("p",[a._v("一般不约束变量")]),a._v(" "),e("h3",{attrs:{id:"never-类型"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#never-类型"}},[a._v("#")]),a._v(" never 类型")]),a._v(" "),e("p",[a._v("表示该函数永远不会结束。")]),a._v(" "),e("h3",{attrs:{id:"字面量类型"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#字面量类型"}},[a._v("#")]),a._v(" 字面量类型")]),a._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v("let sex: 'man' | 'woman';\n// sex = 0 // 会提示只能是 man 或 woman 类型\n")])])]),e("h3",{attrs:{id:"元祖类型-tuple"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#元祖类型-tuple"}},[a._v("#")]),a._v(" 元祖类型（Tuple）")]),a._v(" "),e("p",[a._v("一个固定长度的数组，并且数组中每一项都确定。")]),a._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v("let tuple: [string, number]; // 表示 tuple 这个数组只能有两项 并且第一项是字符串，第二项是数组\ntuple = ['1',2]\n")])])]),e("h3",{attrs:{id:"any-类型"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#any-类型"}},[a._v("#")]),a._v(" any 类型")]),a._v(" "),e("p",[a._v("any 类型可以绕过类型检查，any 类型的数据可以赋值给任何类型。")]),a._v(" "),e("h3",{attrs:{id:"类型别名"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#类型别名"}},[a._v("#")]),a._v(" 类型别名")]),a._v(" "),e("p",[a._v("对一致的一些类型定义名称")]),a._v(" "),e("p",[a._v("type 类型名 = 值；")]),a._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v("type gender = '男' | '女'\ntype User = {\n    name: string,\n    sex: gender,\n    age: number\n}\nlet user: User = {\n    name: 'zhang san',\n    sex: '女',\n    age: 18,\n}\n")])])]),e("h3",{attrs:{id:"函数相关约束"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#函数相关约束"}},[a._v("#")]),a._v(" 函数相关约束")]),a._v(" "),e("p",[a._v("函数重载：在函数实现之前，对函数调用的多种情况进行声明")]),a._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v("/**\n * 约束 a b 同为数字类型\n * @param a \n * @param b \n */\nfunction func(a: number, b: number): number;\n/**\n * 约束 a b 同为字符串类型\n * @param a \n * @param b \n */\nfunction func(a: string, b: string): string;\nfunction func(a, b): number | string {\n    if (typeof a === 'number' && typeof b === 'number') {\n        return a * b;\n    } else if (typeof a === 'string' && typeof b === 'string') {\n        return a + b;\n    }\n    throw new Error('a and b not number or string')\n}\n\nvar ret = func(1, 2);\nvar rets = func('a', 'b');\n")])])]),e("p",[a._v("可选参数：可以在某个参数名后面加上问号，表示该参数可以不用传递。")]),a._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v("function test(a: number, b: number): number;\nfunction test(a: number, b: number, c: string): string;\nfunction test(a: number, b: number, c?: string): number | string {\n    if (c) {\n        return a + b + c;\n    } else {\n        return a + b;\n    }\n}\nvar t1 = test(1, 2);\nvar t2 = test(1, 2, '3')\n")])])])])}),[],!1,null,null,null);t.default=r.exports}}]);