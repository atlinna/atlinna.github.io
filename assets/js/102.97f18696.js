(window.webpackJsonp=window.webpackJsonp||[]).push([[102],{691:function(e,t,n){"use strict";n.r(t);var a=n(7),l=Object(a.a)({},(function(){var e=this,t=e.$createElement,n=e._self._c||t;return n("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[n("h3",{attrs:{id:"foreach"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#foreach"}},[e._v("#")]),e._v(" forEach")]),e._v(" "),n("h4",{attrs:{id:"描述"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#描述"}},[e._v("#")]),e._v(" 描述：")]),e._v(" "),n("p",[e._v("forEach() 方法对数组的每个元素执行一次给定的函数。")]),e._v(" "),n("p",[e._v("它的表现形式呢（调用形式）\narr.forEach(callback(currentValue [, index [, array]])[, thisArg])")]),e._v(" "),n("p",[n("strong",[e._v("参数")])]),e._v(" "),n("ul",[n("li",[e._v("callback：为数组中每个元素执行的函数，该函数接收一至三个参数：\n"),n("ul",[n("li",[e._v("currentValue：数组中正在处理的当前元素。")]),e._v(" "),n("li",[e._v("index:数组中正在处理的当前元素的索引。")]),e._v(" "),n("li",[e._v("array:forEach() 方法正在操作的数组。")])])]),e._v(" "),n("li",[e._v("thisArg：可选参数。当执行回调函数 callback 时，用作 this 的值。")])]),e._v(" "),n("h4",{attrs:{id:"代码实现"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#代码实现"}},[e._v("#")]),e._v(" 代码实现：")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("    Array.prototype.myForEach = function (callback, thisArg) {\n        var T, k;\n\n        if (this == null) {\n            throw new TypeError(' this is null or not defined');\n        }\n\n        // 1. Let O be the result of calling toObject() passing the\n        // |this| value as the argument.\n        var O = Object(this);\n\n        // 2. Let lenValue be the result of calling the Get() internal\n        // method of O with the argument \"length\".\n        // 3. Let len be toUint32(lenValue).\n        var len = O.length >>> 0;\n\n        // 4. If isCallable(callback) is false, throw a TypeError exception.\n        // See: http://es5.github.com/#x9.11\n        if (typeof callback !== \"function\") {\n            throw new TypeError(callback + ' is not a function');\n        }\n\n        // 5. If thisArg was supplied, let T be thisArg; else let\n        // T be undefined.\n        if (arguments.length > 1) {\n            T = thisArg;\n        }\n\n        // 6. Let k be 0\n        k = 0;\n\n        // 7. Repeat, while k < len\n        while (k < len) {\n            var kValue;\n            // a. Let Pk be ToString(k).\n            //    This is implicit for LHS operands of the in operator\n            // b. Let kPresent be the result of calling the HasProperty\n            //    internal method of O with argument Pk.\n            //    This step can be combined with c\n            // c. If kPresent is true, then\n            if (k in O) {\n                // i. Let kValue be the result of calling the Get internal\n                // method of O with argument Pk.\n                kValue = O[k];\n\n                // ii. Call the Call internal method of callback with T as\n                // the this value and argument list containing kValue, k, and O.\n                callback.call(T, kValue, k, O);\n            }\n            // d. Increase k by 1.\n            k++;\n        }\n        // 8. return undefined\n    };\n\n    Array.prototype.myForEach.call('abcde', item => {\n        console.log(item);\n    })\n")])])]),n("h4",{attrs:{id:"分析"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#分析"}},[e._v("#")]),e._v(" 分析：")]),e._v(" "),n("p",[e._v("1、")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("    // 1. Let O be the result of calling toObject() passing the\n    // |this| value as the argument.\n    var O = Object(this);\n")])])]),n("p",[e._v("首先，看上面这行代码，这个是做什么用的？")]),e._v(" "),n("p",[e._v("2、")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v('    // 2. Let lenValue be the result of calling the Get() internal\n    // method of O with the argument "length".\n    // 3. Let len be toUint32(lenValue).\n    var len = O.length >>> 0;\n')])])]),n("p",[e._v("这行代码又做了些什么呢？")]),e._v(" "),n("p",[e._v("先看第一个问题\n"),n("strong",[e._v("-1-")]),e._v("\n理想状态下我们使用数组调用， this 自然指向的是我们的数组，但是如果使用 call 或 apply 的方式使用其他的数据类型来掉用 forEach 方法，那是不是就出现问题了？ 使用 Object(this) 的原因就是把我们的数据包装成一个对象。\n但是我们自己尝试的时候发现，不管我用的是不是一个对象，最后打印出来，就是一个对象类型的数据。这是因为，非严格模式下，改变 this 指向，this 都会被包装成一个对象，但在严格模式下不会。\n这个的作用就是处理传入的数据非数组的情况。")]),e._v(" "),n("p",[n("strong",[e._v("-2-")]),e._v("\n这个的作用就是防止你的length属性是 null 或 undefined 。")])])}),[],!1,null,null,null);t.default=l.exports}}]);