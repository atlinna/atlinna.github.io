(window.webpackJsonp=window.webpackJsonp||[]).push([[156],{743:function(t,r,a){"use strict";a.r(r);var s=a(10),n=Object(s.a)({},(function(){var t=this,r=t.$createElement,a=t._self._c||r;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h2",{attrs:{id:"apply"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#apply"}},[t._v("#")]),t._v(" apply")]),t._v(" "),a("h3",{attrs:{id:"描述"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#描述"}},[t._v("#")]),t._v(" 描述")]),t._v(" "),a("p",[t._v("apply() 方法调用一个具有给定this值的函数，以及以一个数组（或类数组对象）的形式提供的参数。")]),t._v(" "),a("p",[t._v("func.apply(thisArg, [argsArray])")]),t._v(" "),a("p",[a("strong",[t._v("参数")]),t._v("：")]),t._v(" "),a("ul",[a("li",[t._v("thisArg\n"),a("strong",[t._v("必选的。在 func 函数运行时使用的 this 值。请注意，this可能不是该方法看到的实际值：如果这个函数处于非严格模式下，则指定为 null 或 undefined 时会自动替换为指向全局对象，原始值会被包装。")])]),t._v(" "),a("li",[t._v("argsArray\n"),a("strong",[t._v("可选的。一个数组或者类数组对象，其中的数组元素将作为单独的参数传给 func 函数。如果该参数的值为 null 或  undefined，则表示不需要传入任何参数。从ECMAScript 5 开始可以使用类数组对象。浏览器兼容性 请参阅本文底部内容。")])])]),t._v(" "),a("p",[t._v("我们实现了 call ，apply 与 call 及其相似，只不过 call 和 apply 传参的不通而已。")]),t._v(" "),a("h3",{attrs:{id:"代码实现"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#代码实现"}},[t._v("#")]),t._v(" 代码实现：")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("    function myApply(thisArg,argsArray){\n       if(thisArg == null) return this()\n       let args = argsArray || [];\n       thisArg.handler = this\n       let ret = thisArg.handler(...args)\n       delete thisArg.handler;\n       return ret\n   }\n\n   Function.prototype.myApply = myApply;\n")])])])])}),[],!1,null,null,null);r.default=n.exports}}]);