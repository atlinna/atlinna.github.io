(window.webpackJsonp=window.webpackJsonp||[]).push([[83],{670:function(e,t,n){"use strict";n.r(t);var a=n(10),r=Object(a.a)({},(function(){var e=this,t=e.$createElement,n=e._self._c||t;return n("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[n("h2",{attrs:{id:"属性描述符"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#属性描述符"}},[e._v("#")]),e._v(" 属性描述符")]),e._v(" "),n("p",[e._v("property descriptor")]),e._v(" "),n("p",[e._v("属性描述符，是一个普通对象， 用于描述一个属性的信息。")]),e._v(" "),n("h3",{attrs:{id:"获取属性描述符"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#获取属性描述符"}},[e._v("#")]),e._v(" 获取属性描述符")]),e._v(" "),n("p",[e._v("使用 "),n("code",[e._v("Object.getOwnPropertyDescriptor(obj,prop)")])]),e._v(" "),n("ul",[n("li",[e._v("vlaue 属性的值")]),e._v(" "),n("li",[e._v("configurable 该属性的描述符是否可以修改")]),e._v(" "),n("li",[e._v("enumerable  该属性是否可以枚举")]),e._v(" "),n("li",[e._v("writable          该属性的值是否可以被重新赋值。")])]),e._v(" "),n("p",[e._v("使用 "),n("code",[e._v("Object.getOwnPropertyDescriptors(obj)")]),e._v(" 获取一个对象中的所有属性描述。")]),e._v(" "),n("h3",{attrs:{id:"设置属性描述符"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#设置属性描述符"}},[e._v("#")]),e._v(" 设置属性描述符")]),e._v(" "),n("p",[n("code",[e._v("Object.defineProperty(obj,prop,setting)")])]),e._v(" "),n("p",[e._v("1、configurable")]),e._v(" "),n("p",[e._v("当设置 "),n("code",[e._v("configurable")]),e._v(" 为 false 之后，如果继续更改此属性的 configurable，将会报错。")]),e._v(" "),n("p",[n("strong",[e._v("注意")]),e._v("：当 "),n("code",[e._v("configurable")]),e._v(" 为 false 时，如果将 writable 从 true 改为 false是不会报错的，如果从 false 改为 true 会报错。")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v('const obj = {\n  a: 1,\n  b: 2,\n};\n\nObject.defineProperty(obj, "a", {\n  value: 2,\n  configurable: false,\n});\n\nObject.defineProperty(obj, "a", {\n  value: 3,\n  configurable: true,\n}); // Cannot redefine a\n\nconsole.log(Object.getOwnPropertyDescriptors(obj));\n\n')])])]),n("p",[e._v("2、enumerable")]),e._v(" "),n("p",[e._v("如果设置 enumerable 为 false，将会影响使用迭代的一些方法如：")]),e._v(" "),n("ul",[n("li",[e._v("Object.keys")]),e._v(" "),n("li",[e._v("Object.values")]),e._v(" "),n("li",[e._v("Object.entries")])]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("const obj = {\n  a: 1,\n  b: 2,\n};\n\nObject.defineProperty(obj, \"a\", {\n  value: 3,\n  enumerable: false,\n});\n\nconsole.log(Object.keys(obj)); // b\nconsole.log(Object.values(obj)); // 2\nconsole.log(Object.entries(obj)); // ['b',2]\n")])])]),n("p",[e._v("3、writable")]),e._v(" "),n("p",[e._v("如果设置 writable 为 false，此属性将变为只读属性，无法重新赋值，除非将 writable 重新改为 true")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("const obj = {\n  a: 1,\n  b: 2,\n};\n\nObject.defineProperty(obj, \"a\", {\n  value: 3,\n  writable: false,\n  configurable:true,\n  enumerable:true\n});\n\nobj.a = 2;\nconsole.log(obj.a);\n\nObject.defineProperty(obj,'a',{\n    writable:true,\n    // enumerable:false,\n})\nobj.a = 4\nconsole.log(obj);\n")])])]),n("h3",{attrs:{id:"存取器属性"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#存取器属性"}},[e._v("#")]),e._v(" 存取器属性")]),e._v(" "),n("p",[e._v("属性描述符中，如果配置了 get 和 set 中的任何一个，则该属性，不再是一个普通属性，而变成了存取器属性。")]),e._v(" "),n("p",[e._v("get 和 set 配置均为函数，如果读取该属性则会调用 get 方法，如果给属性复制，则会调用 set 属性。")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("const user = {}\n\nObject.defineProperty(user,'name',{\n\t\tget(){\n\t\t\treturn this._name;\n\t\t},\n\t\tset(val){\n\t\t\tthis._name = val;\n\t\t}\n})\n\nuser.name = 'Lucas' // 调用 set 方法 为_name 赋值\nconsole.log(user.name) // 调用 get 方法 获取 _name 的值。\n")])])])])}),[],!1,null,null,null);t.default=r.exports}}]);