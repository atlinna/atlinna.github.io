(window.webpackJsonp=window.webpackJsonp||[]).push([[134],{720:function(t,r,n){"use strict";n.r(r);var a=n(10),e=Object(a.a)({},(function(){var t=this,r=t.$createElement,n=t._self._c||r;return n("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[n("h2",{attrs:{id:"instanceof"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#instanceof"}},[t._v("#")]),t._v(" instanceof")]),t._v(" "),n("h4",{attrs:{id:"描述"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#描述"}},[t._v("#")]),t._v(" 描述：")]),t._v(" "),n("p",[t._v("instanceof 运算符用于检测构造函数的 prototype 属性是否出现在某个实例对象的原型链上。")]),t._v(" "),n("h4",{attrs:{id:"代码实现"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#代码实现"}},[t._v("#")]),t._v(" 代码实现：")]),t._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v("    /**\n     * \n     * @param {原} origin \n     * @param {目标} target \n     */\n    function myInstance(origin,target){\n        cur = origin\n        while(cur){\n            if(cur === target.prototype){\n                return true\n            }\n            cur = Object.getPrototypeOf(cur)\n            // cur = cur.__proto__\n        }\n        return false\n    }\n")])])]),n("p",[t._v("我们只需要向上查找 源的原型链。\n这里我们使用 Object.getPrototypeOf 来获取源的原型，而不是直接读取 "),n("strong",[t._v("proto")]),t._v(" 属性。")])])}),[],!1,null,null,null);r.default=e.exports}}]);