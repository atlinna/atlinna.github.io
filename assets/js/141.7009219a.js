(window.webpackJsonp=window.webpackJsonp||[]).push([[141],{729:function(n,t,a){"use strict";a.r(t);var e=a(10),s=Object(e.a)({},(function(){var n=this,t=n.$createElement,a=n._self._c||t;return a("ContentSlotsDistributor",{attrs:{"slot-key":n.$parent.slotKey}},[a("h3",{attrs:{id:"ts中的接口"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#ts中的接口"}},[n._v("#")]),n._v(" TS中的接口")]),n._v(" "),a("p",[n._v("用于约束："),a("strong",[n._v("类、对象、函数")]),n._v(" 的标准。")]),n._v(" "),a("p",[n._v("类似于 Type-C 、USB、Lighting 的数据接口都是要满足一些标准的。")]),n._v(" "),a("p",[n._v("标准的形式：")]),n._v(" "),a("ul",[a("li",[n._v("文档 -> 弱标准，有可能不遵循文档协议，没有提示，只能在运行后才能知道。")]),n._v(" "),a("li",[n._v("代码约束，强标准。")])]),n._v(" "),a("h3",{attrs:{id:"ts-中如何使用接口"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#ts-中如何使用接口"}},[n._v("#")]),n._v(" TS 中如何使用接口")]),n._v(" "),a("ol",[a("li",[a("p",[n._v("接口约束对象")]),n._v(" "),a("p",[n._v("接口和类型别名一样不会出现在编译结果中")]),n._v(" "),a("p",[n._v("区别就是接口可以约束类，")]),n._v(" "),a("div",{staticClass:"language-typescript extra-class"},[a("pre",{pre:!0,attrs:{class:"language-typescript"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[n._v("interface")]),n._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[n._v("Student")]),n._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v("{")]),n._v("\n    name"),a("span",{pre:!0,attrs:{class:"token operator"}},[n._v(":")]),n._v(" "),a("span",{pre:!0,attrs:{class:"token builtin"}},[n._v("string")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v(",")]),n._v("\n    age"),a("span",{pre:!0,attrs:{class:"token operator"}},[n._v(":")]),n._v(" "),a("span",{pre:!0,attrs:{class:"token builtin"}},[n._v("number")]),n._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v("}")]),n._v("\n\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[n._v("let")]),n._v(" stu"),a("span",{pre:!0,attrs:{class:"token operator"}},[n._v(":")]),n._v(" Student "),a("span",{pre:!0,attrs:{class:"token operator"}},[n._v("=")]),n._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v("{")]),n._v("\n    name"),a("span",{pre:!0,attrs:{class:"token operator"}},[n._v(":")]),n._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[n._v("'zhang san'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v(",")]),n._v("\n    age"),a("span",{pre:!0,attrs:{class:"token operator"}},[n._v(":")]),n._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[n._v("18")]),n._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v("}")]),n._v("\n")])])])]),n._v(" "),a("li",[a("p",[n._v("约束函数")]),n._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[n._v("// <-----!1---------\x3e\ninterface callback {\n    (n: number): boolean\n}\n// <-----!2---------\x3e\ntype callback = {\n    (n: number): boolean\n}\n\nfunction sum(source: number[], callback: callback): number {\n    return source.filter(callback).reduce((prev, item) => prev + item, 0)\n}\n\nconsole.log(sum([1, 2, 3, 4, 5], (n) => n % 2 == 0));\n")])])]),a("p",[n._v("两种约束方式都可以")])])]),n._v(" "),a("h3",{attrs:{id:"接口继承"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#接口继承"}},[n._v("#")]),n._v(" 接口继承")]),n._v(" "),a("p",[n._v("可以通过接口间的继承实现多种组合（已经区分开类型别名）")]),n._v(" "),a("p",[n._v("子接口中不能覆盖父接口的成员。")]),n._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[n._v("interface Father {\n    name: string,\n}\n\ninterface Son extends Father {\n    age: number\n}\n\nlet obj: Son = {\n    name: 'zhang san',\n    age: 18\n}\n")])])]),a("p",[n._v("接口支持多继承")]),n._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[n._v("interface Father {\n    name: string,\n}\n\ninterface Son extends Father {\n    age: number\n}\n\ninterface Other extends Son, Father {\n\t\t// age:string,  无法定义，子接口无法覆盖父接口成员。\n    trick: boolean\n}\n\nlet obj: Other = {\n    name: 'zhang san',\n    age: 18,\n    trick: true\n}\n")])])]),a("h3",{attrs:{id:"交叉类型"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#交叉类型"}},[n._v("#")]),n._v(" 交叉类型")]),n._v(" "),a("p",[n._v("可以通过 "),a("code",[n._v("&")]),n._v(" 进行类型别名的交叉。")]),n._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[n._v("type Father = {\n    name: string\n}\n\ntype Son = {\n    age: number\n}\n\ntype Other = {\n\t\t//age:string , 可以通过，但是会将两个成员进行交叉变成， number & string \n    trick: boolean\n} & Son & Father\n\nlet obj: Other = {\n    name: 'zhang san',\n    age: 18,\n    trick: true\n}\n")])])]),a("p",[n._v("区别：")]),n._v(" "),a("ul",[a("li",[n._v("子接口不能覆盖父接口的成员")]),n._v(" "),a("li",[n._v("交叉类型会把相同成员的类型进行交叉。")])]),n._v(" "),a("h3",{attrs:{id:"readonly-修饰符"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#readonly-修饰符"}},[n._v("#")]),n._v(" readonly （修饰符）")]),n._v(" "),a("p",[n._v("修饰一些类型和属性。修饰的目标是只读的。")]),n._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[n._v("interface Student {\n    readonly stu_id: string,\n    name: string,\n    age: number\n}\n\nlet stu: Student = {\n    name: 'zhang san',\n    age: 18,\n    stu_id: '12138'\n}\n")])])])])}),[],!1,null,null,null);t.default=s.exports}}]);